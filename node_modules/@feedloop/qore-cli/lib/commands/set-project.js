"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const user_1 = tslib_1.__importDefault(require("@feedloop/qore-sdk/lib/user"));
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const config_1 = tslib_1.__importDefault(require("../config"));
const flags_1 = require("../flags");
class SetProject extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(SetProject);
        const configs = await flags_1.promptFlags(flags, SetProject.flags);
        try {
            const user = user_1.default();
            user.setToken(configs.token);
            const orgs = await user.organizations();
            const { organizationId } = await prompts_1.default([
                {
                    name: "organizationId",
                    type: "select",
                    message: "Select organization",
                    choices: orgs.map(org => ({ title: org.name, value: org.id }))
                }
            ]);
            const org = await user.organization(organizationId);
            const { projects } = await org.projects();
            const { projectId } = await prompts_1.default([
                {
                    name: "projectId",
                    type: "select",
                    message: "Select project",
                    choices: projects.map(project => ({
                        title: project.name,
                        value: project.id
                    }))
                }
            ]);
            config_1.default.set("project", projectId);
            config_1.default.set("org", organizationId);
            const project = projects.find(p => p.id === projectId);
            const organization = orgs.find(o => o.id === organizationId);
            this.log(`Successfully set project to ${project === null || project === void 0 ? void 0 : project.name} of the ${organization === null || organization === void 0 ? void 0 : organization.name} organization`);
        }
        catch (error) {
            this.error("Failed to set project", { exit: 100 });
        }
    }
}
exports.default = SetProject;
SetProject.description = "Set project target";
SetProject.examples = [`$ qore set-project`];
SetProject.flags = {
    token: flags_1.tokenFlag
};
