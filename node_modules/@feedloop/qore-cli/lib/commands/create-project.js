"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const user_1 = tslib_1.__importDefault(require("@feedloop/qore-sdk/lib/user"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const config_1 = tslib_1.__importDefault(require("../config"));
const flags_1 = require("../flags");
const codegen_1 = tslib_1.__importDefault(require("./codegen"));
class CreateProject extends command_1.Command {
    static getTemplates() {
        const templates = fs_1.default
            .readdirSync(CreateProject.templatesLocation)
            .filter(file => fs_1.default
            .lstatSync(path_1.default.resolve(CreateProject.templatesLocation, file))
            .isDirectory());
        return templates;
    }
    async run() {
        const { args, flags } = this.parse(CreateProject);
        const configs = await flags_1.promptFlags(flags, CreateProject.flags);
        const templates = CreateProject.getTemplates();
        if (templates.indexOf(configs.template) === -1) {
            this.error(`Cant find "${configs.template}" from project templates, may want to choose from the following available templates: ${templates}`);
        }
        const destination = path_1.default.resolve(process.cwd(), args.name || "qore-project");
        fs_extra_1.default.copySync(path_1.default.resolve(CreateProject.templatesLocation, configs.template), destination);
        const user = user_1.default();
        user.setToken(configs.token);
        const org = await user.organization(configs.org);
        const schemaFile = fs_extra_1.default.readJSONSync(path_1.default.resolve(destination, "qore.schema.json"));
        const projectId = await org.createProject({
            name: args.name,
            schema: schemaFile
        });
        config_1.default.set("org", org.id);
        config_1.default.set("project", projectId);
        await codegen_1.default.writeConfigFile(Object.assign(Object.assign({}, configs), { project: projectId }), destination);
        this.log("New project initialized on", destination);
    }
}
exports.default = CreateProject;
CreateProject.description = "create a project from template";
CreateProject.examples = [
    `$ qore create-project --template todo-list-typescript your-project-name`
];
CreateProject.templatesLocation = path_1.default.resolve(__dirname, "../../templates/");
CreateProject.flags = {
    token: flags_1.tokenFlag,
    org: flags_1.orgFlag,
    template: command_1.flags.string({
        char: "t",
        name: "template",
        description: "qore project template",
        default: "todo-list-typescript"
    })
};
CreateProject.args = [{ name: "name" }];
