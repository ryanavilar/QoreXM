import { ProjectConfig } from "./project";
import { Row, Rows } from "./row";
import { APIView, View, ViewSummary } from "./view";
import { APIField, Field, FieldType } from "./field/field";
import { APIForm, Form, FormSummary } from "./form";
export declare type APITable = {
    id: string;
    name: string;
    type: "auth" | "cross-project" | null;
    master?: {
        projectId: string;
        tableId: string;
    };
};
export interface Table extends APITable {
    _config: ProjectConfig;
    id: string;
    name: string;
    createView(params: Omit<APIView, "id" | "vields"> & {
        vields: string[];
    }): Promise<string>;
    views(): Promise<ViewSummary[]>;
    view(id: string): Promise<View>;
    createForm(params: Omit<APIForm, "id">): Promise<string>;
    forms(): Promise<FormSummary[]>;
    form(id: string): Promise<Form>;
    addField<T extends FieldType = FieldType>(field: Omit<APIField<T>, "id"> & {
        viewId?: string;
    }): Promise<string>;
    fields(): Promise<Field[]>;
    field(id: string): Promise<Field>;
    rowsCount(qs: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<{
        totalCount: number;
    }>;
    rows(qs: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<Rows>;
    row(rowId: string): Promise<Row>;
    addRow(params?: {
        [key: string]: any;
    }): Promise<string>;
    delete(): Promise<void>;
    update(table: Partial<Omit<APITable, "id">>): Promise<void>;
}
export declare class TableImpl implements Table {
    id: string;
    name: APITable["name"];
    type: APITable["type"];
    _config: ProjectConfig;
    constructor(params: APITable & {
        config: ProjectConfig;
    });
    views(limit?: number, offset?: number): Promise<ViewSummary[]>;
    view(viewId: string): Promise<View>;
    createView(params: Omit<APIView, "id" | "vields"> & {
        vields: string[];
    }): Promise<string>;
    forms(limit?: number, offset?: number): Promise<FormSummary[]>;
    form(formId: string): Promise<Form>;
    createForm(params: Omit<APIForm, "id">): Promise<string>;
    addField<T extends FieldType = FieldType>(field: Omit<APIField<T>, "id"> & {
        viewId?: string;
    }): Promise<string>;
    fields(): Promise<Field[]>;
    field(fieldId: string): Promise<Field>;
    rowsCount(qs?: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<{
        totalCount: number;
    }>;
    rows(qs?: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<Rows>;
    row(rowId: string): Promise<Row>;
    addRow(): Promise<string>;
    update(table: Partial<Omit<APITable, "id">>): Promise<void>;
    delete(): Promise<void>;
}
