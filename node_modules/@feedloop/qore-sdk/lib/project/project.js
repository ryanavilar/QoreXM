"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
const table_1 = require("./table");
const view_1 = require("./view");
const role_1 = require("./role");
const member_1 = require("./member");
const url_1 = require("./url");
const authConfig_1 = require("./authConfig");
const form_1 = require("./form");
const workflow_1 = require("./workflow");
exports.default = (config) => {
    if (config.token)
        config.token = "Bearer " + config.token;
    return {
        setToken: (token) => {
            config.token = token;
        },
        createTable: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.table(config),
                data: params
            }, config.token);
            return id;
        },
        exportSchema: async () => {
            const schema = await common_1.callApi({
                method: "get",
                url: url_1.url.schema(config)
            }, config.token);
            return schema;
        },
        tables: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.table(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(table => new table_1.TableImpl(Object.assign(Object.assign({}, table), { config })));
        },
        table: async (tableId) => {
            const table = await common_1.callApi({
                method: "get",
                url: url_1.url.table(Object.assign(Object.assign({}, config), { tableId }))
            }, config.token);
            return new table_1.TableImpl(Object.assign(Object.assign({}, table), { config }));
        },
        createView: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.view(config),
                data: params
            }, config.token);
            return id;
        },
        views: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.view(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(view => new view_1.ViewSummaryImpl(Object.assign(Object.assign({}, view), { config })));
        },
        view: async (viewId) => {
            const view = await common_1.callApi({
                method: "get",
                url: url_1.url.view(Object.assign(Object.assign({}, config), { viewId }))
            }, config.token);
            return new view_1.ViewImpl(Object.assign(Object.assign({}, view), { config }));
        },
        createForm: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.form(config),
                data: params
            }, config.token);
            return id;
        },
        forms: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.form(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(form => new form_1.FormSummaryImpl(Object.assign(Object.assign({}, form), { config })));
        },
        form: async (formId) => {
            const form = await common_1.callApi({
                method: "get",
                url: url_1.url.form(Object.assign(Object.assign({}, config), { formId }))
            }, config.token);
            return new form_1.FormImpl(Object.assign(Object.assign({}, form), { config }));
        },
        auth: {
            async signInWithUserToken(userToken) {
                const { token } = await common_1.callApi({
                    method: "post",
                    url: url_1.url.projectLogin(config),
                    data: { token: userToken }
                }, "Bearer " + userToken);
                config.token = "Bearer " + token;
            },
            signOut() {
                config.token = undefined;
            },
            token() {
                return config.token;
            }
        },
        authConfig: async () => {
            const authConfig = await common_1.callApi({
                method: "get",
                url: url_1.url.authConfig(config)
            }, config.token);
            return new authConfig_1.AuthConfigImpl({ authConfig, config });
        },
        createAuthConfig: async (params) => {
            await common_1.callApi({
                method: "post",
                url: url_1.url.authConfig(config),
                data: params
            }, config.token);
        },
        createRole: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.role(config),
                data: params
            }, config.token);
            return id;
        },
        roles: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.role(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(role => new role_1.RoleImpl({ role, config }));
        },
        role: async (roleId) => {
            const role = await common_1.callApi({
                method: "get",
                url: url_1.url.role(Object.assign(Object.assign({}, config), { roleId }))
            }, config.token);
            return new role_1.RoleImpl({ role, config });
        },
        createMember: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.member(config),
                data: params
            }, config.token);
            return id;
        },
        members: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.member(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(member => new member_1.MemberImpl(Object.assign(Object.assign({}, member), { config })));
        },
        member: async (memberId) => {
            const member = await common_1.callApi({
                method: "get",
                url: url_1.url.member(Object.assign(Object.assign({}, config), { memberId }))
            }, config.token);
            return new member_1.MemberImpl(Object.assign(Object.assign({}, member), { config }));
        },
        sandbox: async () => {
            const project = await common_1.callApi({
                method: "get",
                url: url_1.url.sandbox(Object.assign({}, config))
            }, config.token);
            return project.id;
        },
        createSandbox: async () => {
            const project = await common_1.callApi({
                method: "post",
                url: url_1.url.sandbox(Object.assign({}, config))
            }, config.token);
            return project.id;
        },
        deploySandbox: async () => {
            const { ok } = await common_1.callApi({
                method: "patch",
                url: url_1.url.sandbox(Object.assign({}, config)) + "/deploy"
            }, config.token);
            return ok;
        },
        revertSandbox: async () => {
            const { ok } = await common_1.callApi({
                method: "patch",
                url: url_1.url.sandbox(Object.assign({}, config)) + "/revert"
            }, config.token);
            return ok;
        },
        createWorkflow: async (params) => {
            const { id } = await common_1.callApi({
                method: "post",
                url: url_1.url.workflow(config),
                data: params
            }, config.token);
            return id;
        },
        workflows: async (limit, offset) => {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url_1.url.workflow(config),
                params: { limit, offset }
            }, config.token);
            return nodes.map(workflow => new workflow_1.WorkflowImpl(Object.assign(Object.assign({}, workflow), { config })));
        }
    };
};
