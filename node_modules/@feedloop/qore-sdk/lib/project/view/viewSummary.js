"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewSummaryImpl = void 0;
const common_1 = require("../../common");
const row_1 = require("../row");
const url_1 = require("../url");
class ViewSummaryImpl {
    constructor(params) {
        this.id = params.id;
        this.name = params.name;
        this.tableId = params.tableId;
        this._config = params.config;
    }
    async update(view) {
        await common_1.callApi({
            method: "patch",
            url: url_1.url.view(Object.assign(Object.assign({}, this._config), { viewId: this.id })),
            data: view
        }, this._config.token);
    }
    async addVield(fieldId) {
        await common_1.callApi({
            method: "post",
            url: url_1.url.vield(Object.assign(Object.assign({}, this._config), { viewId: this.id, fieldId }))
        }, this._config.token);
    }
    async vields() {
        const { nodes } = await common_1.callApi({
            method: "get",
            url: url_1.url.vield(Object.assign(Object.assign({}, this._config), { viewId: this.id }))
        }, this._config.token);
        return nodes.map(field => (Object.assign(Object.assign({}, field), { delete: async () => {
                await common_1.callApi({
                    method: "delete",
                    url: url_1.url.vield(Object.assign(Object.assign({}, this._config), { viewId: this.id, fieldId: field.id }))
                }, this._config.token);
            } })));
    }
    async reorderVieldAfter(fieldId, afterFieldId) {
        await common_1.callApi({
            method: "patch",
            url: url_1.url.reorderVieldAfter(Object.assign(Object.assign({}, this._config), { viewId: this.id, fieldId,
                afterFieldId }))
        }, this._config.token);
    }
    async rows(qs = {}) {
        const { nodes, totalCount } = await common_1.callApi({
            method: "get",
            url: url_1.url.vrow(Object.assign(Object.assign({}, this._config), { viewId: this.id })),
            params: qs
        }, this._config.token);
        const params = { config: this._config, parentId: this.tableId };
        return {
            nodes: nodes.map((row) => new row_1.RowImpl(params, row)),
            totalCount
        };
    }
    async rowsCount(qs = {}) {
        const { totalCount } = await common_1.callApi({
            method: "get",
            url: url_1.url.vrowCount(Object.assign(Object.assign({}, this._config), { viewId: this.id })),
            params: qs
        }, this._config.token);
        return { totalCount };
    }
    async row(rowId) {
        const row = await common_1.callApi({
            method: "get",
            url: url_1.url.vrow(Object.assign(Object.assign({}, this._config), { viewId: this.id, rowId }))
        }, this._config.token);
        const params = { config: this._config, parentId: this.tableId };
        return new row_1.RowImpl(params, row);
    }
    async addRow() {
        const { id } = await common_1.callApi({
            method: "post",
            url: url_1.url.row(Object.assign(Object.assign({}, this._config), { tableId: this.tableId }))
        }, this._config.token);
        return id;
    }
    async delete() {
        await common_1.callApi({
            method: "delete",
            url: url_1.url.view(Object.assign(Object.assign({}, this._config), { viewId: this.id }))
        }, this._config.token);
    }
}
exports.ViewSummaryImpl = ViewSummaryImpl;
