import { APIField, FieldType } from "../field";
import { ProjectConfig } from "../project";
import { Row, Rows } from "../row";
import { APIView } from "./view";
import { ViewMethod } from "./viewMethod";
export declare type Vield<T extends FieldType = FieldType> = APIField<T> & {
    delete(): Promise<void>;
};
export declare type APIViewSummary = {
    id: string;
    name: string;
    tableId: string;
};
export declare type ViewSummary = APIViewSummary & ViewMethod;
export declare class ViewSummaryImpl implements ViewSummary {
    id: string;
    tableId: APIViewSummary["tableId"];
    name: APIViewSummary["name"];
    _config: ProjectConfig;
    constructor(params: APIViewSummary & {
        config: ProjectConfig;
    });
    update(view: Omit<APIView, "id" | "vields"> & {
        vields: string[];
    }): Promise<void>;
    addVield(fieldId: string): Promise<void>;
    vields(): Promise<Vield[]>;
    reorderVieldAfter(fieldId: string, afterFieldId: string): Promise<void>;
    rows(qs?: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<Rows>;
    rowsCount(qs?: {
        [key: string]: any;
        limit?: number;
        offset?: number;
        isDisplayField?: boolean;
    }): Promise<{
        totalCount: number;
    }>;
    row(rowId: string): Promise<Row>;
    addRow(): Promise<string>;
    delete(): Promise<void>;
}
