import { APITable, Table } from "./table";
import { APIView, View, ViewSummary } from "./view";
import { APIRole, Role } from "./role";
import { Member } from "./member";
import { AuthConfigImpl, PasswordAuthConfig, QoreAuthConfig } from "./authConfig";
import { APIForm, Form, FormSummary } from "./form";
import { APIWorkflow, Workflow } from "./workflow";
import { APIField } from "./field";
export declare type ProjectConfig = {
    organizationId: string;
    projectId: string;
    token?: string;
};
export declare type TableSchema = APITable & {
    fields: APIField[];
    forms: Form[];
};
export declare type ViewSchema = APIView & {
    fields: APIField[];
};
export declare type FormSchema = APIForm;
export declare type RoleSchema = APIRole;
export declare type QoreProjectSchema = {
    tables: TableSchema[];
    views: ViewSchema[];
    forms: FormSchema[];
    roles: RoleSchema[];
};
declare const _default: (config: ProjectConfig) => {
    setToken: (token: string) => void;
    createTable: (params: Omit<APITable, "id" | "fields" | "type">) => Promise<string>;
    exportSchema: () => Promise<QoreProjectSchema>;
    tables: (limit?: number | undefined, offset?: number | undefined) => Promise<Table[]>;
    table: (tableId: string) => Promise<Table>;
    createView: (params: Omit<APIView, "id" | "vields"> & {
        vields: string[];
    }) => Promise<string>;
    views: (limit?: number | undefined, offset?: number | undefined) => Promise<ViewSummary[]>;
    view: (viewId: string) => Promise<View>;
    createForm: (params: Omit<APIForm, "id">) => Promise<string>;
    forms: (limit?: number | undefined, offset?: number | undefined) => Promise<FormSummary[]>;
    form: (formId: string) => Promise<Form>;
    auth: {
        signInWithUserToken(userToken: string): Promise<void>;
        signOut(): void;
        token(): string | undefined;
    };
    authConfig: () => Promise<AuthConfigImpl>;
    createAuthConfig: (params: Omit<QoreAuthConfig, "id"> | Omit<PasswordAuthConfig, "id">) => Promise<void>;
    createRole: (params: Omit<APIRole, "id" | "isAdmin">) => Promise<string>;
    roles: (limit?: number | undefined, offset?: number | undefined) => Promise<Role[]>;
    role: (roleId: string) => Promise<Role>;
    createMember: (params: {
        email: string;
        roleId?: string;
    }) => Promise<string>;
    members: (limit?: number | undefined, offset?: number | undefined) => Promise<Member[]>;
    member: (memberId: string) => Promise<Member>;
    sandbox: () => Promise<string>;
    createSandbox: () => Promise<string>;
    deploySandbox: () => Promise<boolean>;
    revertSandbox: () => Promise<boolean>;
    createWorkflow: (params: Omit<APIWorkflow, "id">) => Promise<string>;
    workflows: (limit?: number | undefined, offset?: number | undefined) => Promise<Workflow[]>;
};
export default _default;
