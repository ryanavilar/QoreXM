import { ProjectConfig } from "./project";
export declare type WebhookAction = {
    type: "webhook";
    url: string;
    method: "GET" | "POST" | "PUT" | "DELETE";
    headers?: Record<string, string>;
    transformUrl?: Record<string, string>;
};
export declare type DatabaseOperationAction = {
    type: "database-operation";
    projectId: string;
    tableId: string;
    schema: string;
    operation: "select";
    fields: string[];
};
export declare type SequenceAction = {
    type: "sequence";
    steps: (WebhookAction | DatabaseOperationAction)[];
};
export declare type WorkflowAction = {
    id: string;
} & (WebhookAction | DatabaseOperationAction | SequenceAction);
export declare type WorkflowCondition = {
    field: string;
    values: string[];
    operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "between";
};
export declare type APIWorkflow = {
    id: string;
    tableId: string;
    name: string;
    event: "onRowCreate" | "onRowUpdate" | "onRowDelete";
    type: "trigger";
    active: boolean;
    actions: WorkflowAction[];
    preCondition?: {
        and?: WorkflowCondition[];
        or?: WorkflowCondition[];
    };
};
export interface Workflow extends APIWorkflow {
    _config: ProjectConfig;
    delete(): Promise<void>;
    update(workflow: Partial<Omit<APIWorkflow, "id">>): Promise<void>;
}
export declare class WorkflowImpl implements Workflow {
    id: Workflow["id"];
    tableId: Workflow["tableId"];
    name: Workflow["name"];
    event: Workflow["event"];
    type: Workflow["type"];
    active: Workflow["active"];
    actions: Workflow["actions"];
    preCondition: Workflow["preCondition"];
    _config: ProjectConfig;
    constructor(params: APIWorkflow & {
        config: ProjectConfig;
    });
    delete(): Promise<void>;
    update(workflow: Partial<Omit<APIWorkflow, "id" | "type">>): Promise<void>;
}
