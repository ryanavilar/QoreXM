"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableImpl = void 0;
const common_1 = require("../common");
const row_1 = require("./row");
const view_1 = require("./view");
const url_1 = require("./url");
const field_1 = require("./field/field");
const form_1 = require("./form");
class TableImpl {
    constructor(params) {
        this.id = params.id;
        this.name = params.name;
        this.type = params.type;
        this._config = params.config;
    }
    async views(limit, offset) {
        const { nodes } = await common_1.callApi({
            method: "get",
            url: url_1.url.view(this._config),
            params: { limit, offset, tableId: this.id }
        }, this._config.token);
        return nodes.map(view => new view_1.ViewSummaryImpl(Object.assign(Object.assign({}, view), { config: this._config })));
    }
    async view(viewId) {
        const view = await common_1.callApi({
            method: "get",
            url: url_1.url.view(Object.assign(Object.assign({}, this._config), { viewId }))
        }, this._config.token);
        return new view_1.ViewImpl(Object.assign(Object.assign({}, view), { config: this._config }));
    }
    async createView(params) {
        const { id } = await common_1.callApi({
            method: "post",
            url: url_1.url.view(this._config),
            data: params
        }, this._config.token);
        return id;
    }
    async forms(limit, offset) {
        const { nodes } = await common_1.callApi({
            method: "get",
            url: url_1.url.form(this._config),
            params: { limit, offset, tableId: this.id }
        }, this._config.token);
        return nodes.map(form => new form_1.FormSummaryImpl(Object.assign(Object.assign({}, form), { config: this._config })));
    }
    async form(formId) {
        const form = await common_1.callApi({
            method: "get",
            url: url_1.url.form(Object.assign(Object.assign({}, this._config), { formId }))
        }, this._config.token);
        return new form_1.FormImpl(Object.assign(Object.assign({}, form), { config: this._config }));
    }
    async createForm(params) {
        const { id } = await common_1.callApi({
            method: "post",
            url: url_1.url.form(this._config),
            data: params
        }, this._config.token);
        return id;
    }
    async addField(field) {
        const { id } = await common_1.callApi({
            method: "post",
            url: url_1.url.field(Object.assign(Object.assign({}, this._config), { tableId: this.id })),
            data: field
        }, this._config.token);
        return id;
    }
    async fields() {
        const { nodes } = await common_1.callApi({
            method: "get",
            url: url_1.url.field(Object.assign(Object.assign({}, this._config), { tableId: this.id }))
        }, this._config.token);
        return nodes.map(field => field_1.buildField({ field, tableId: this.id, config: this._config }));
    }
    async field(fieldId) {
        const field = await common_1.callApi({
            method: "get",
            url: url_1.url.field(Object.assign(Object.assign({}, this._config), { tableId: this.id, fieldId }))
        }, this._config.token);
        if (!field)
            throw new Error("Field not found");
        return field_1.buildField({ field, tableId: this.id, config: this._config });
    }
    async rowsCount(qs = {}) {
        const { totalCount } = await common_1.callApi({
            method: "get",
            url: url_1.url.vrowCount(Object.assign(Object.assign({}, this._config), { viewId: this.id })),
            params: qs
        }, this._config.token);
        return { totalCount };
    }
    async rows(qs = {}) {
        const { nodes, totalCount } = await common_1.callApi({
            method: "get",
            url: url_1.url.row(Object.assign(Object.assign({}, this._config), { tableId: this.id })),
            params: qs
        }, this._config.token);
        const params = { config: this._config, parentId: this.id };
        return {
            nodes: nodes.map((row) => new row_1.RowImpl(params, row)),
            totalCount
        };
    }
    async row(rowId) {
        const row = await common_1.callApi({
            method: "get",
            url: url_1.url.row(Object.assign(Object.assign({}, this._config), { tableId: this.id, rowId }))
        }, this._config.token);
        const params = { config: this._config, parentId: this.id };
        return new row_1.RowImpl(params, row);
    }
    async addRow() {
        const { id } = await common_1.callApi({
            method: "post",
            url: url_1.url.row(Object.assign(Object.assign({}, this._config), { tableId: this.id }))
        }, this._config.token);
        return id;
    }
    async update(table) {
        await common_1.callApi({
            method: "patch",
            url: url_1.url.row(Object.assign(Object.assign({}, this._config), { tableId: this.id })),
            data: table
        }, this._config.token);
    }
    async delete() {
        await common_1.callApi({
            method: "delete",
            url: url_1.url.table(Object.assign(Object.assign({}, this._config), { tableId: this.id }))
        }, this._config.token);
    }
}
exports.TableImpl = TableImpl;
