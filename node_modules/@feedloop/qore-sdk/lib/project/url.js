"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.url = void 0;
exports.url = {
    project(params) {
        return `/orgs/${params.organizationId}/projects/${params.projectId}`;
    },
    authConfig(params) {
        if (!params.projectAuthId)
            return exports.url.project(params) + "/authConfig";
        return exports.url.project(params) + "/authConfig/" + params.projectAuthId;
    },
    view(params) {
        if (!params.viewId)
            return exports.url.project(params) + "/views";
        return exports.url.project(params) + "/views/" + params.viewId;
    },
    form(params) {
        if (!params.formId)
            return exports.url.project(params) + "/forms";
        return exports.url.project(params) + "/forms/" + params.formId;
    },
    workflow(params) {
        if (!params.workflowId)
            return exports.url.project(params) + "/workflows";
        return exports.url.project(params) + "/workflows/" + params.workflowId;
    },
    table(params) {
        if (!params.tableId)
            return exports.url.project(params) + "/tables";
        return exports.url.project(params) + "/tables/" + params.tableId;
    },
    schema(params) {
        return this.project(params) + "/schema";
    },
    field(params) {
        const tableUrl = exports.url.table(params);
        const fieldUrl = tableUrl + "/fields";
        if (!params.fieldId)
            return fieldUrl;
        return fieldUrl + "/" + params.fieldId;
    },
    vield(params) {
        const viewUrl = exports.url.view(params);
        const fieldUrl = viewUrl + "/fields";
        if (!params.fieldId)
            return fieldUrl;
        return fieldUrl + "/" + params.fieldId;
    },
    reorderVieldAfter(params) {
        const viewUrl = exports.url.view(params);
        const fieldUrl = viewUrl + "/fields";
        return fieldUrl + "/" + params.fieldId + "/reorder/" + params.afterFieldId;
    },
    row(params) {
        const viewUrl = exports.url.table(params);
        const rowUrl = viewUrl + "/rows";
        if (!params.rowId)
            return rowUrl;
        return rowUrl + "/" + params.rowId;
    },
    rowCount(params) {
        const viewUrl = exports.url.table(params);
        const rowUrl = viewUrl + "/rows/count";
        if (!params.rowId)
            return rowUrl;
        return rowUrl + "/" + params.rowId;
    },
    vrow(params) {
        const viewUrl = exports.url.view(params);
        const rowUrl = viewUrl + "/v2rows";
        if (!params.rowId)
            return rowUrl;
        return rowUrl + "/" + params.rowId;
    },
    vrowCount(params) {
        const viewUrl = exports.url.view(params);
        const rowUrl = viewUrl + "/v2rows/count";
        if (!params.rowId)
            return rowUrl;
        return rowUrl + "/" + params.rowId;
    },
    addRowRelation(params) {
        const tableUrl = exports.url.table(params);
        return tableUrl + "/rows/" + params.rowId + "/relation/" + params.fieldId;
    },
    executeRow(params) {
        const tableUrl = exports.url.table(params);
        return tableUrl + "/rows/" + params.rowId + "/action/" + params.fieldId;
    },
    removeRowRelation(params) {
        const tableUrl = exports.url.table(params);
        return (tableUrl +
            "/rows/" +
            params.rowId +
            "/relation/" +
            params.fieldId +
            "/" +
            params.refRowId);
    },
    projectLogin(params) {
        return exports.url.project(params) + "/authenticate";
    },
    member(params) {
        return !params.memberId
            ? exports.url.project(params) + "/members"
            : exports.url.project(params) + "/members/" + params.memberId;
    },
    role(params) {
        return !params.roleId
            ? exports.url.project(params) + "/roles"
            : exports.url.project(params) + "/roles/" + params.roleId;
    },
    sandbox(params) {
        return exports.url.project(params) + "/sandbox";
    }
};
