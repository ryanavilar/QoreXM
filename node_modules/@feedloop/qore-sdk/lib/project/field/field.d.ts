import { ProjectConfig } from "../project";
import { APIRow, Rows } from "../row";
import { ActionField } from "./actionField";
import { BooleanField } from "./booleanField";
import { DateField } from "./dateField";
import { FormulaField } from "./formulaField";
import { LookupField } from "./lookupField";
import { NumberField } from "./numberField";
import { PasswordField } from "./passwordField";
import { RelationField } from "./relationField";
import { RoleField } from "./roleField";
import { RollupField } from "./rollupField";
import { SelectField } from "./selectField";
import { TextField } from "./textField";
import { FileField } from "./fileField";
import { JsonField } from "./jsonField";
export declare type Fields = {
    text: TextField;
    number: NumberField;
    date: DateField;
    rollup: RollupField;
    lookup: LookupField;
    relation: RelationField;
    select: SelectField;
    formula: FormulaField;
    action: ActionField;
    boolean: BooleanField;
    role: RoleField;
    password: PasswordField;
    file: FileField;
    json: JsonField;
};
export declare type FieldType = keyof Fields;
export declare type APIField<T extends FieldType = FieldType> = Fields[T];
export declare type Field<T extends FieldType = FieldType> = APIField<T> & {
    delete(): Promise<void>;
    update(field: Omit<APIField<T>, "id">): Promise<void>;
} & (T extends "relation" ? {
    refRows(qs: {
        limit?: number;
        offset?: number;
        q?: string;
    }): Promise<Rows>;
} : {}) & (T extends "file" ? {
    getUploadFile(fileName: string): Promise<string>;
} : {});
export declare function buildRowField(params: {
    field: Field;
    config: ProjectConfig;
    rowId: string;
    tableId: string;
    row: APIRow;
}): {
    value(): any;
    update(value?: string | number | boolean | any[] | Date | {
        [key: string]: any;
    } | undefined): Promise<void>;
} | {
    value(): any;
    add(value: string): Promise<void>;
    remove(refRowId: string): Promise<void>;
} | {
    execute(parameters: {
        [key: string]: any;
    }): Promise<void>;
} | {
    value(): any;
} | {
    value(): any;
    getUploadUrl(fileName: string): Promise<any>;
    update(value?: string | number | boolean | Date | undefined): Promise<void>;
};
export declare function buildField<T extends FieldType = FieldType>(params: {
    field: APIField;
    tableId: string;
    config: ProjectConfig;
}): {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "number";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "boolean";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "password";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "select";
    select: string[];
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "text";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "json";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "lookup";
    source: string;
    destinations: string[];
    returnType?: string | undefined;
    multiple: boolean;
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "date";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "rollup";
    source: string;
    destinations: string[];
    condition?: string | undefined;
    aggregate: "max" | "sum" | "count" | "min" | "avg";
    materialize: boolean;
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "relation";
    table: string;
    multiple: boolean;
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "formula";
    returnType: "number";
    formula: string;
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "action";
    parameters: import("..").Parameter[];
    condition?: string | undefined;
    tasks: import("./actionField").Task[];
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "role";
} | {
    refRows: ((qs?: {
        limit?: number;
        offset?: number;
        q?: string;
    }) => Promise<Rows>) | null;
    delete: () => Promise<void>;
    update: (data: Partial<APIField<T>>) => Promise<void>;
    id: string;
    name: string;
    deletionProtection: boolean;
    linked: boolean;
    type: "file";
    fileType: string;
};
