"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildField = exports.buildRowField = void 0;
const common_1 = require("../../common");
const row_1 = require("../row");
const url_1 = require("../url");
function buildRowField(params) {
    const { field, config, rowId, tableId, row } = params;
    const fieldId = field.id;
    switch (field.type) {
        case "role":
        case "select":
        case "boolean":
        case "date":
        case "number":
        case "password":
        case "json":
        case "text":
            return {
                value() {
                    return row[fieldId];
                },
                async update(value) {
                    await common_1.callApi({
                        method: "patch",
                        url: url_1.url.row(Object.assign(Object.assign({}, config), { tableId, rowId })),
                        data: {
                            [fieldId]: value
                        }
                    }, config.token);
                }
            };
        case "relation":
            return {
                value() {
                    return row[fieldId];
                },
                async add(value) {
                    await common_1.callApi({
                        method: "post",
                        url: url_1.url.addRowRelation(Object.assign(Object.assign({}, config), { tableId, rowId, fieldId })),
                        data: { value }
                    }, config.token);
                },
                async remove(refRowId) {
                    await common_1.callApi({
                        method: "delete",
                        url: url_1.url.removeRowRelation(Object.assign(Object.assign({}, config), { tableId,
                            rowId,
                            fieldId,
                            refRowId }))
                    }, config.token);
                }
            };
        case "action":
            return {
                async execute(parameters) {
                    await common_1.callApi({
                        method: "post",
                        url: url_1.url.executeRow(Object.assign(Object.assign({}, config), { tableId, rowId, fieldId })),
                        data: parameters
                    }, config.token);
                }
            };
        case "lookup":
        case "rollup":
        case "formula":
            return {
                value() {
                    return row[fieldId];
                }
            };
        case "file":
            return {
                value() {
                    return row[fieldId];
                },
                async getUploadUrl(fileName) {
                    const { url: uploadUrl } = await common_1.callApi({
                        method: "get",
                        url: url_1.url.table(Object.assign(Object.assign({}, config), { tableId })) + "/upload-url",
                        params: { fileName }
                    }, config.token);
                    return uploadUrl;
                },
                async update(value) {
                    await common_1.callApi({
                        method: "patch",
                        url: url_1.url.row(Object.assign(Object.assign({}, config), { tableId, rowId })),
                        data: {
                            [fieldId]: value
                        }
                    }, config.token);
                }
            };
    }
}
exports.buildRowField = buildRowField;
function buildField(params) {
    const { field, tableId, config } = params;
    return Object.assign(Object.assign({}, field), { refRows: field.type !== "relation"
            ? null
            : async (qs = {}) => {
                const { nodes, totalCount } = await common_1.callApi({
                    method: "get",
                    url: url_1.url.row(Object.assign(Object.assign({}, config), { tableId: field.table })),
                    params: Object.assign(Object.assign({}, qs), { isDisplayField: true })
                }, config.token);
                const rowParam = { parentId: tableId, config };
                return {
                    nodes: nodes.map((row) => new row_1.RowImpl(rowParam, row)),
                    totalCount
                };
            }, delete: async () => {
            await common_1.callApi({
                method: "delete",
                url: url_1.url.field(Object.assign(Object.assign({}, config), { tableId, fieldId: field.id }))
            }, config.token);
        }, update: async (data) => {
            await common_1.callApi({
                method: "patch",
                url: url_1.url.field(Object.assign(Object.assign({}, config), { tableId, fieldId: field.id })),
                data
            }, config.token);
        } });
}
exports.buildField = buildField;
