"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationImpl = void 0;
const common_1 = require("../common");
const account_1 = require("./account");
const project_1 = require("./project");
class OrganizationImpl {
    constructor(params) {
        this.id = params.id;
        this.name = params.name;
        this.subdomain = params.subdomain;
        this.category = params.category;
        this.size = params.size;
        this._url = params.url;
        this._token = params.userToken;
    }
    async accounts(limit, offset) {
        const { nodes } = await common_1.callApi({
            method: "get",
            url: this._url.account(this.id),
            params: { limit, offset }
        }, this._token);
        return nodes.map(account => new account_1.AccountImpl(Object.assign(Object.assign({}, account), { userToken: this._token, url: this._url, orgId: this.id })));
    }
    async inviteAccount(params) {
        await common_1.callApi({
            method: "post",
            url: this._url.account(this.id),
            data: params
        }, this._token);
    }
    async createProject(params) {
        const { id } = await common_1.callApi({
            method: "post",
            url: this._url.project(this.id),
            data: params
        }, this._token);
        return id;
    }
    async projects(limit = 10, offset = 0) {
        const { nodes, totalCount } = await common_1.callApi({
            method: "get",
            url: this._url.project(this.id),
            params: { limit, offset }
        }, this._token);
        return {
            projects: nodes.map((row) => new project_1.ProjectImpl(Object.assign(Object.assign({}, row), { userToken: this._token, url: this._url, orgId: this.id }))),
            totalCount
        };
    }
    async project(id) {
        const project = await common_1.callApi({
            method: "get",
            url: this._url.project(this.id, id)
        }, this._token);
        return new project_1.ProjectImpl(Object.assign(Object.assign({}, project), { userToken: this._token, url: this._url, orgId: this.id }));
    }
    async delete() {
        await common_1.callApi({
            method: "delete",
            url: this._url.organization(this.id)
        }, this._token);
    }
    async update(org) {
        await common_1.callApi({
            method: "patch",
            url: this._url.organization(this.id),
            data: org
        }, this._token);
    }
}
exports.OrganizationImpl = OrganizationImpl;
