"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
const project_1 = require("./project");
const organization_1 = require("./organization");
const url_1 = require("./url");
exports.default = () => {
    let user;
    const url = url_1.generateUrlUserPath();
    return {
        setToken(token) {
            user = { email: "", token: "Bearer " + token };
        },
        async register(params) {
            await common_1.callApi({
                method: "post",
                url: url.register(),
                data: params
            });
        },
        async login(email, password) {
            const { token } = await common_1.callApi({
                method: "post",
                url: url.login(),
                data: { email, password }
            });
            user = { email, token: "Bearer " + token };
            return token;
        },
        async verify(email, activationCode) {
            const { token } = await common_1.callApi({
                method: "post",
                url: url.verify(),
                data: { email, activationCode }
            });
            user = { email, token: "Bearer " + token };
        },
        async createOrganization(params) {
            const { id } = await common_1.callApi({
                method: "post",
                url: url.organization(),
                data: params
            }, user.token);
            return id;
        },
        async projects(orgId, props) {
            const { limit, offset } = props || {};
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url.project(orgId),
                params: { limit, offset }
            }, user.token);
            return nodes.map((row) => new project_1.ProjectImpl(Object.assign(Object.assign({}, row), { userToken: user.token, url, orgId })));
        },
        async organizations(limit, offset) {
            const { nodes } = await common_1.callApi({
                method: "get",
                url: url.organization(),
                params: { limit, offset }
            }, user.token);
            return nodes.map((row) => new organization_1.OrganizationImpl(Object.assign(Object.assign({}, row), { userToken: user.token, url })));
        },
        async organization(id) {
            // NOT IMPLEMENTED IN BACKEND
            // const org = await callApi<APIOrganization>(
            //   {
            //     method: 'get',
            //     url: url.organization(id),
            //   },
            //   user.token
            // );
            return new organization_1.OrganizationImpl(Object.assign({ id, category: "", size: "", name: "", subdomain: "" }, { userToken: user.token, url }));
        },
        user: () => user,
        logout: () => {
            user = { token: "", email: "" };
        }
    };
};
