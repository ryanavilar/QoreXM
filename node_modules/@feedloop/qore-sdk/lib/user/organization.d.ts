import { QoreProjectSchema } from "../project";
import { Account } from "./account";
import { Project } from "./project";
import { UrlUserPath } from "./url";
export declare type APIOrganization = {
    id: string;
    name: string;
    category: string;
    size: string;
    subdomain: string;
};
export declare type Organization = APIOrganization & {
    accounts(limit?: number, offset?: number): Promise<Account[]>;
    inviteAccount(params: {
        email: string;
        type: string;
    }): Promise<void>;
    createProject(params: {
        name: string;
        schema?: QoreProjectSchema;
    }): Promise<string>;
    projects(limit?: number, offset?: number): Promise<{
        projects: Project[];
        totalCount: number;
    }>;
    project(id: string): Promise<Project>;
    delete(): Promise<void>;
    update(org: Partial<APIOrganization>): Promise<void>;
};
export declare class OrganizationImpl implements Organization {
    id: string;
    name: string;
    category: string;
    subdomain: string;
    size: string;
    _url: UrlUserPath;
    _token: string;
    constructor(params: APIOrganization & {
        url: UrlUserPath;
        userToken: string;
    });
    accounts(limit?: number, offset?: number): Promise<Account[]>;
    inviteAccount(params: {
        email: string;
        type: string;
    }): Promise<void>;
    createProject(params: {
        name: string;
        schema?: QoreProjectSchema;
    }): Promise<string>;
    projects(limit?: number, offset?: number): Promise<{
        projects: Project[];
        totalCount: number;
    }>;
    project(id: string): Promise<Project>;
    delete(): Promise<void>;
    update(org: Partial<APIOrganization>): Promise<void>;
}
