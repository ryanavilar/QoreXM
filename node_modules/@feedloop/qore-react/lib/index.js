"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const createQoreContext = (qoreClient) => {
    const views = Object.keys(qoreClient.views).reduce((previous, currentViewId) => (Object.assign(Object.assign({}, previous), { [currentViewId]: {
            useListRow: (opts = {}, config = {}) => {
                const [data, setData] = react_1.default.useState([]);
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const stream = react_1.default.useMemo(() => qoreClient.views[currentViewId].readRows(opts, config), [...Object.entries(opts).flat(), ...Object.entries(config).flat()]);
                react_1.default.useEffect(() => {
                    setStatus("loading");
                    const subscription = stream.subscribe(({ error, data }) => {
                        if (error) {
                            setError(error);
                            setStatus("error");
                        }
                        if (data) {
                            setError(null);
                            setData(data.nodes);
                            setStatus("success");
                        }
                    });
                    return () => {
                        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
                    };
                }, [stream]);
                return { data, error, status, revalidate: stream.revalidate };
            },
            useGetRow: (rowId, config = {}) => {
                const [data, setData] = react_1.default.useState(null);
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const stream = react_1.default.useMemo(() => qoreClient.views[currentViewId].readRow(rowId, config), [rowId, ...Object.entries(config).flat()]);
                react_1.default.useEffect(() => {
                    setStatus("loading");
                    const subscription = stream.subscribe(({ data, error }) => {
                        if (error) {
                            setError(error);
                            setStatus("error");
                        }
                        if (data) {
                            setData(data);
                            setError(null);
                            setStatus("success");
                        }
                    });
                    return () => {
                        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
                    };
                }, [stream]);
                return { data, error, status, revalidate: stream.revalidate };
            },
            useInsertRow: () => {
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const insertRow = (data) => __awaiter(void 0, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient.views[currentViewId].insertRow(data);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { insertRow, status, error };
            },
            useUpdateRow: () => {
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const updateRow = (rowId, data) => __awaiter(void 0, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient.views[currentViewId].updateRow(rowId, data);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { updateRow, status, error };
            },
            useDeleteRow: () => {
                const [status, setStatus] = react_1.default.useState("idle");
                const [error, setError] = react_1.default.useState(null);
                const deleteRow = (rowId) => __awaiter(void 0, void 0, void 0, function* () {
                    try {
                        setStatus("loading");
                        const result = yield qoreClient.views[currentViewId].deleteRow(rowId);
                        setError(null);
                        setStatus("success");
                        return result;
                    }
                    catch (error) {
                        setStatus("error");
                        setError(error);
                    }
                });
                return { deleteRow, status, error };
            },
            useActions: rowId => {
                const qoreClientRowActions = qoreClient.views[currentViewId].actions;
                const [statuses, setStatuses] = react_1.default.useState(Object.keys(qoreClientRowActions).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr]: "idle" })), {}));
                const [errors, setErrors] = react_1.default.useState(Object.keys(qoreClientRowActions).reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr]: null })), {}));
                const rowActions = Object.entries(qoreClientRowActions).reduce((prev, [fieldId, action]) => (Object.assign(Object.assign({}, prev), { [fieldId]: {
                        trigger: (input) => __awaiter(void 0, void 0, void 0, function* () {
                            try {
                                setStatuses(Object.assign(Object.assign({}, statuses), { [fieldId]: "loading" }));
                                const result = yield action.trigger(rowId, input);
                                setStatuses(Object.assign(Object.assign({}, statuses), { [fieldId]: "success" }));
                                setErrors(Object.assign(Object.assign({}, errors), { [fieldId]: null }));
                                return result;
                            }
                            catch (newError) {
                                setStatuses(Object.assign(Object.assign({}, statuses), { [fieldId]: "error" }));
                                setErrors(Object.assign(Object.assign({}, errors), { [fieldId]: newError }));
                                return false;
                            }
                        })
                    } })), {});
                return {
                    statuses,
                    errors,
                    rowActions
                };
            }
        } })), {});
    return {
        views
    };
};
exports.default = createQoreContext;
