"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_hooks_1 = require("@testing-library/react-hooks");
const _1 = __importDefault(require("."));
const qore_client_1 = require("@feedloop/qore-client");
const nock_1 = __importDefault(require("nock"));
const createNewQoreContext = () => {
    const qoreClient = new qore_client_1.QoreClient({
        endpoint: "http://localhost:8080",
        organizationId: "FAKE_ORG",
        projectId: "FAKE_PROJECT"
    });
    qoreClient.init({
        forms: [],
        roles: [],
        tables: [],
        views: [
            {
                id: "allTasks",
                name: "All tasks",
                filter: "",
                parameters: [],
                sorts: [],
                tableId: "tasks",
                fields: [
                    {
                        type: "text",
                        name: "id",
                        linked: true,
                        id: "id",
                        deletionProtection: false
                    },
                    {
                        type: "text",
                        name: "title",
                        linked: true,
                        id: "title",
                        deletionProtection: false
                    },
                    {
                        id: "finishTask",
                        name: "finishTask",
                        type: "action",
                        linked: true,
                        tasks: [{ update: { done: "true" }, type: "update" }],
                        parameters: [],
                        deletionProtection: false
                    }
                ]
            }
        ]
    });
    return _1.default(qoreClient);
};
let scope;
beforeEach(() => {
    scope = scope = nock_1.default("http://localhost:8080")
        .defaultReplyHeaders({
        "access-control-allow-origin": "*",
        "access-control-allow-credentials": "true",
        "access-control-allow-headers": "Authorization"
    })
        .options(() => true)
        .reply(200, undefined, {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application:json"
    });
});
describe("useListRow", () => {
    it("should fetch data successfully", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope.get("/FAKE_PROJECT/allTasks/rows").reply(200, {
            nodes: [
                {
                    id: "25b0cccf-4851-43e2-80c7-f68e7883dbd6",
                    user: {
                        id: "9275e876-fd95-45a0-ad67-b947a1296c32",
                        displayField: "rrmdn@pm.me"
                    },
                    name: "Meeting 1",
                    done: true
                }
            ],
            totalCount: "1"
        });
        const qoreContext = createNewQoreContext();
        const { result, waitForNextUpdate } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useListRow());
        expect(result.current.status).toEqual("loading");
        expect(result.current.data).toEqual([]);
        yield waitForNextUpdate();
        expect(result.current.status).toEqual("success");
        expect(result.current.data).toEqual([
            {
                id: "25b0cccf-4851-43e2-80c7-f68e7883dbd6",
                user: {
                    id: "9275e876-fd95-45a0-ad67-b947a1296c32",
                    displayField: "rrmdn@pm.me"
                },
                name: "Meeting 1",
                done: true
            }
        ]);
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope.get("/FAKE_PROJECT/allTasks/rows").reply(500, undefined);
        const qoreContext = createNewQoreContext();
        const { result, waitForNextUpdate } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useListRow());
        expect(result.current.status).toEqual("loading");
        expect(result.current.error).toEqual(null);
        yield waitForNextUpdate();
        expect(result.current.status).toEqual("error");
        expect((_a = result.current.error) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
describe("useGetRow", () => {
    it("should fetch data successfully", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, {
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f",
            description: null,
            done: false,
            name: "New task",
            user: null
        });
        const qoreContext = createNewQoreContext();
        const { result, waitForNextUpdate } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useGetRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f"));
        expect(result.current.status).toEqual("loading");
        expect(result.current.data).toEqual(null);
        yield waitForNextUpdate();
        expect(result.current.status).toEqual("success");
        expect(result.current.data).toEqual({
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f",
            description: null,
            done: false,
            name: "New task",
            user: null
        });
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(500, undefined);
        const qoreContext = createNewQoreContext();
        const { result, waitForNextUpdate } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useGetRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f"));
        expect(result.current.status).toEqual("loading");
        expect(result.current.error).toEqual(null);
        yield waitForNextUpdate();
        expect(result.current.status).toEqual("error");
        expect((_a = result.current.error) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
describe("useInsertRow", () => {
    it("should insert new row, write, and read from cache", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope
            .post("/FAKE_PROJECT/allTasks/rows")
            .reply(200, {
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f"
        })
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, {
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f",
            title: "New task"
        })
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, {
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f",
            title: "New task"
        });
        const qoreContext = createNewQoreContext();
        const { result: insertResult } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useInsertRow());
        const { result: getResult } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useGetRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f"));
        expect(insertResult.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            const newTask = yield insertResult.current.insertRow({
                title: "New task"
            });
            expect(newTask).toHaveProperty("title", "New task");
            expect(getResult.current.data).toEqual(newTask);
        }));
        expect(insertResult.current.status).toEqual("success");
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope.post("/FAKE_PROJECT/allTasks/rows").reply(500, undefined);
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useInsertRow());
        expect(result.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            yield result.current.insertRow({ title: "New Task" });
        }));
        expect(result.current.status).toEqual("error");
        expect((_a = result.current.error) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
describe("useUpdateRow", () => {
    it("should update row", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, {
            id: "beba4104-44ee-46b2-9ddc-e6bfd0a1570f",
            title: "Old task"
        })
            .patch("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, { ok: true });
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useUpdateRow());
        expect(result.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            const updatedTask = yield result.current.updateRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f", { title: "Old task" });
            expect(updatedTask).toHaveProperty("title", "Old task");
        }));
        expect(result.current.status).toEqual("success");
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope
            .get("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(500, undefined)
            .patch("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(500, undefined);
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useUpdateRow());
        expect(result.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            yield result.current.updateRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f", {
                title: "Old Task"
            });
        }));
        expect(result.current.status).toEqual("error");
        expect((_a = result.current.error) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
describe("useDeleteRow", () => {
    it("should delete row", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope
            .delete("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(200, { ok: true });
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useDeleteRow());
        expect(result.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            const isSuccess = yield result.current.deleteRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f");
            expect(isSuccess).toEqual(true);
        }));
        expect(result.current.status).toEqual("success");
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope
            .delete("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f")
            .reply(500);
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useDeleteRow());
        expect(result.current.status).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            yield result.current.deleteRow("beba4104-44ee-46b2-9ddc-e6bfd0a1570f");
        }));
        expect(result.current.status).toEqual("error");
        expect((_a = result.current.error) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
describe("useActions", () => {
    it("should trigger action", () => __awaiter(void 0, void 0, void 0, function* () {
        scope = scope
            .post("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f/finishTask")
            .reply(200, { isExecuted: true });
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useActions("beba4104-44ee-46b2-9ddc-e6bfd0a1570f"));
        expect(result.current.statuses.finishTask).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(result.current.rowActions.finishTask.trigger({ notes: "some notes" })).resolves.toEqual(true);
        }));
        expect(result.current.statuses.finishTask).toEqual("success");
    }));
    it("should get error message if network failed", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        scope = scope
            .post("/FAKE_PROJECT/allTasks/rows/beba4104-44ee-46b2-9ddc-e6bfd0a1570f/finishTask")
            .reply(500);
        const qoreContext = createNewQoreContext();
        const { result } = react_hooks_1.renderHook(() => qoreContext.views.allTasks.useActions("beba4104-44ee-46b2-9ddc-e6bfd0a1570f"));
        expect(result.current.statuses.finishTask).toEqual("idle");
        yield react_hooks_1.act(() => __awaiter(void 0, void 0, void 0, function* () {
            yield result.current.rowActions.finishTask.trigger({});
        }));
        expect(result.current.statuses.finishTask).toEqual("error");
        expect((_a = result.current.errors.finishTask) === null || _a === void 0 ? void 0 : _a.message).toEqual("Request failed with status code 500");
    }));
});
