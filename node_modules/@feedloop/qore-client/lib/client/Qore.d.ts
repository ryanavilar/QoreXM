import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as Wonka from "wonka";
import { Exchange, ExchangeInput, QoreOperation, QoreOperationConfig, QoreOperationResult, QoreSchema } from "../types";
import { ViewDriver } from "./ViewDriver";
import { QoreProjectSchema } from "@feedloop/qore-sdk";
export declare type RelationValue = {
    id: string;
} | Array<{
    id: string;
}>;
export declare type QoreRow = {
    id: string;
} & Record<string, string | number | boolean | RelationValue>;
export declare type QoreConfig = {
    endpoint: string;
    projectId: string;
    organizationId: string;
    authenticationId?: string;
    getToken?: () => string | undefined;
    onError?: (error: Error) => void;
};
export declare const defaultOperationConfig: QoreOperationConfig;
export declare class QoreProject {
    config: QoreConfig;
    axios: AxiosInstance;
    constructor(config: QoreConfig);
}
export declare type OperationResult<T> = {
    loading: boolean;
    data?: T;
    error?: Error;
};
export declare type ViewDriverObject<T> = T extends ViewDriver<infer U> ? U : never;
export declare type CacheRef = {
    __ref: string;
};
export declare const composeExchanges: (exchanges: Exchange[]) => ({ client, forward }: ExchangeInput) => import("../types").ExchangeIO;
export declare type PromisifiedSource<T = any> = Wonka.Source<T> & {
    toPromise: () => Promise<T>;
    revalidate: (config?: Partial<QoreOperationConfig>) => void;
    subscribe: (callback: (data: T) => void) => Wonka.Subscription;
};
export declare function withHelpers<T>(source$: Wonka.Source<T>, client: QoreClient, operation: QoreOperation): PromisifiedSource<T>;
export default class QoreClient<T extends QoreSchema = QoreSchema> {
    results: Wonka.Source<QoreOperationResult<AxiosRequestConfig>>;
    operations: Wonka.Source<QoreOperation<AxiosRequestConfig>>;
    nextOperation: (operation: QoreOperation<AxiosRequestConfig>) => void;
    activeOperations: Record<string, number>;
    project: QoreProject;
    views: {
        [K in keyof T]: ViewDriver<T[K]>;
    };
    constructor(config: QoreConfig);
    init(schema: QoreProjectSchema): void;
    authenticate(email: string, password: string): Promise<string>;
    onOperationStart(operation: QoreOperation): void;
    onOperationEnd(operation: QoreOperation): void;
    revalidate(operation: QoreOperation): void;
    executeOperation(operation: QoreOperation): Wonka.Source<QoreOperationResult<AxiosRequestConfig, any>>;
    execute<Data = any>(operation: QoreOperation): PromisifiedSource<QoreOperationResult<AxiosRequestConfig, Data>>;
}
