"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewDriver = void 0;
var nanoid_1 = require("nanoid");
var Qore_1 = require("./Qore");
var ViewDriver = /** @class */ (function () {
    function ViewDriver(client, project, id, tableId, fields) {
        var _this = this;
        this.fields = {};
        this.client = client;
        this.id = id;
        this.tableId = tableId;
        this.project = project;
        this.fields = fields.reduce(function (map, field) {
            var _a;
            return (__assign(__assign({}, map), (_a = {}, _a[field.id] = field, _a)));
        }, {});
        this.actions = Object.entries(this.fields)
            .filter(function (_a) {
            var _ = _a[0], field = _a[1];
            return field.type === "action";
        })
            .reduce(function (prev, _a) {
            var _b;
            var fieldId = _a[0];
            return (__assign(__assign({}, prev), (_b = {}, _b[fieldId] = {
                trigger: function (rowId, params) { return __awaiter(_this, void 0, void 0, function () {
                    var axiosConfig, operation, res;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                axiosConfig = {
                                    url: "/" + this.id + "/rows/" + rowId + "/" + fieldId,
                                    data: params,
                                    method: "POST"
                                };
                                operation = {
                                    key: JSON.stringify(axiosConfig),
                                    request: axiosConfig,
                                    type: axiosConfig.method,
                                    meta: {},
                                    pollInterval: 0,
                                    networkPolicy: "network-only"
                                };
                                return [4 /*yield*/, this.client
                                        .execute(operation)
                                        .toPromise()];
                            case 1:
                                res = _b.sent();
                                if ((_a = res.data) === null || _a === void 0 ? void 0 : _a.isExecuted)
                                    return [2 /*return*/, true];
                                if (res.error)
                                    throw res.error;
                                throw new Error("Trigger has failed");
                        }
                    });
                }); }
            }, _b)));
        }, {});
    }
    ViewDriver.prototype.readRows = function (opts, config) {
        if (opts === void 0) { opts = {}; }
        if (config === void 0) { config = Qore_1.defaultOperationConfig; }
        var axiosConfig = {
            url: "/" + this.id + "/rows",
            params: opts,
            method: "GET"
        };
        var operation = __assign({ key: JSON.stringify(axiosConfig), request: axiosConfig, type: axiosConfig.method, meta: {} }, __assign(__assign({}, Qore_1.defaultOperationConfig), config));
        return this.client.execute(operation);
    };
    ViewDriver.prototype.readRow = function (id, config) {
        if (config === void 0) { config = Qore_1.defaultOperationConfig; }
        var axiosConfig = {
            url: "/" + this.id + "/rows/" + id,
            method: "GET"
        };
        var operation = __assign({ key: JSON.stringify(axiosConfig), request: axiosConfig, type: axiosConfig.method, meta: {} }, __assign(__assign({}, Qore_1.defaultOperationConfig), config));
        return this.client.execute(operation);
    };
    ViewDriver.prototype.updateRow = function (id, input) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosConfig, operation, patchError, row;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        axiosConfig = {
                            url: "/" + this.id + "/rows/" + id,
                            data: input,
                            method: "PATCH"
                        };
                        operation = {
                            key: JSON.stringify(axiosConfig),
                            request: axiosConfig,
                            type: axiosConfig.method,
                            meta: {},
                            pollInterval: 0,
                            networkPolicy: "network-only"
                        };
                        return [4 /*yield*/, this.client
                                .execute(operation)
                                .toPromise()];
                    case 1:
                        patchError = (_a.sent()).error;
                        if (patchError)
                            throw patchError;
                        return [4 /*yield*/, this.readRow(id).toPromise()];
                    case 2:
                        row = _a.sent();
                        if (!row.data)
                            throw row.error;
                        return [2 /*return*/, row.data];
                }
            });
        });
    };
    ViewDriver.prototype.deleteRow = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosConfig, operation, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        axiosConfig = {
                            url: "/" + this.id + "/rows/" + id,
                            method: "DELETE"
                        };
                        operation = {
                            key: JSON.stringify(axiosConfig),
                            request: axiosConfig,
                            type: axiosConfig.method,
                            meta: {},
                            pollInterval: 0,
                            networkPolicy: "network-only"
                        };
                        return [4 /*yield*/, this.client.execute(operation).toPromise()];
                    case 1:
                        res = _a.sent();
                        if (res.error)
                            throw res.error;
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ViewDriver.prototype.insertRow = function (input) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var axiosConfig, operation, result, row;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        axiosConfig = {
                            url: "/" + this.id + "/rows",
                            data: input,
                            method: "POST"
                        };
                        operation = {
                            key: JSON.stringify(axiosConfig),
                            request: axiosConfig,
                            type: axiosConfig.method,
                            meta: {},
                            pollInterval: 0,
                            networkPolicy: "network-only"
                        };
                        return [4 /*yield*/, this.client
                                .execute(operation)
                                .toPromise()];
                    case 1:
                        result = _b.sent();
                        if (!((_a = result.data) === null || _a === void 0 ? void 0 : _a.id))
                            throw result.error;
                        return [4 /*yield*/, this.readRow(result.data.id).toPromise()];
                    case 2:
                        row = _b.sent();
                        if (!row.data)
                            throw row.error;
                        return [2 /*return*/, row.data];
                }
            });
        });
    };
    ViewDriver.prototype.addRelation = function (rowId, relations) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(Object.entries(relations).flatMap(function (_a) {
                            var field = _a[0], values = _a[1];
                            return values.map(function (value) {
                                var axiosConfig = {
                                    baseURL: _this.project.config.endpoint,
                                    url: "/orgs/" + _this.project.config.organizationId + "/projects/" + _this.project.config.projectId + "/tables/" + _this.tableId + "/rows/" + rowId + "/relation/" + field,
                                    method: "POST",
                                    data: { value: value }
                                };
                                return _this.project.axios(axiosConfig);
                            });
                        }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ViewDriver.prototype.removeRelation = function (rowId, relations) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(Object.entries(relations).map(function (_a) {
                            var field = _a[0], relationId = _a[1];
                            var axiosConfig = {
                                baseURL: _this.project.config.endpoint,
                                url: "/orgs/" + _this.project.config.organizationId + "/projects/" + _this.project.config.projectId + "/tables/" + _this.tableId + "/rows/" + rowId + "/relation/" + field + "/" + relationId,
                                method: "DELETE"
                            };
                            return _this.project.axios(axiosConfig);
                        }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ViewDriver.prototype.generateFileUrl = function (filename) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosConfig, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        axiosConfig = {
                            baseURL: this.project.config.endpoint,
                            url: "/orgs/" + this.project.config.organizationId + "/projects/" + this.project.config.projectId + "/tables/" + this.tableId + "/upload-url?fileName=" + filename,
                            method: "GET"
                        };
                        return [4 /*yield*/, this.project.axios(axiosConfig)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.url];
                }
            });
        });
    };
    ViewDriver.prototype.upload = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var formData, ext, uploadUrl, axiosConfig, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = new FormData();
                        formData.append("file", file);
                        ext = file.name.split(".").reverse()[0];
                        return [4 /*yield*/, this.generateFileUrl(nanoid_1.nanoid() + "." + ext)];
                    case 1:
                        uploadUrl = _a.sent();
                        axiosConfig = {
                            url: uploadUrl,
                            method: "POST",
                            data: formData
                        };
                        return [4 /*yield*/, this.project.axios(axiosConfig)];
                    case 2:
                        _a.sent();
                        url = uploadUrl.split("?")[0];
                        return [2 /*return*/, url];
                }
            });
        });
    };
    return ViewDriver;
}());
exports.ViewDriver = ViewDriver;
