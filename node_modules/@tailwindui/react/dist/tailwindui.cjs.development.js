'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var id = 0;

function generateId() {
  return ++id;
}

function useId() {
  var _React$useState = React.useState(generateId),
      id = _React$useState[0];

  return id;
}

function useIsInitialRender() {
  var initial = React.useRef(true);
  React.useEffect(function () {
    initial.current = false;
  }, []);
  return initial.current;
}

function useIsMounted() {
  var mounted = React.useRef(true);
  React.useEffect(function () {
    return function () {
      mounted.current = false;
    };
  }, []);
  return mounted;
}

var useIsoMorphicEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;

function match(value, lookup) {
  if (value in lookup) {
    var returnValue = lookup[value];
    return typeof returnValue === 'function' ? returnValue() : returnValue;
  }

  var error = new Error("Tried to handle \"" + value + "\" but there is no handler defined. Only defined handlers are: " + Object.keys(lookup).map(function (key) {
    return "\"" + key + "\"";
  }).join(', ') + ".");

  if (Error.captureStackTrace) {
    Error.captureStackTrace(error, match);
  }

  throw error;
}

function once(cb) {
  var state = {
    called: false
  };
  return function () {
    if (state.called) {
      return;
    }

    state.called = true;
    return cb.apply(void 0, arguments);
  };
}

function disposables() {
  var disposables = [];
  var api = {
    requestAnimationFrame: function (_requestAnimationFrame) {
      function requestAnimationFrame() {
        return _requestAnimationFrame.apply(this, arguments);
      }

      requestAnimationFrame.toString = function () {
        return _requestAnimationFrame.toString();
      };

      return requestAnimationFrame;
    }(function () {
      var raf = requestAnimationFrame.apply(void 0, arguments);
      api.add(function () {
        return cancelAnimationFrame(raf);
      });
    }),
    nextFrame: function nextFrame() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      api.requestAnimationFrame(function () {
        api.requestAnimationFrame.apply(api, args);
      });
    },
    setTimeout: function (_setTimeout) {
      function setTimeout() {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function () {
      var timer = setTimeout.apply(void 0, arguments);
      api.add(function () {
        return clearTimeout(timer);
      });
    }),
    add: function add(cb) {
      disposables.push(cb);
    },
    dispose: function dispose() {
      disposables.splice(0).forEach(function (dispose) {
        return dispose();
      });
    }
  };
  return api;
}

function addClasses(node) {
  var _node$classList;

  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    classes[_key - 1] = arguments[_key];
  }

  node && classes.length > 0 && (_node$classList = node.classList).add.apply(_node$classList, classes);
}

function removeClasses(node) {
  var _node$classList2;

  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }

  node && classes.length > 0 && (_node$classList2 = node.classList).remove.apply(_node$classList2, classes);
}

var Reason;

(function (Reason) {
  Reason["Finished"] = "finished";
  Reason["Cancelled"] = "cancelled";
})(Reason || (Reason = {}));

function waitForTransition(node, done) {
  var d = disposables();
  if (!node) return d.dispose; // Safari returns a comma separated list of values, so let's sort them and take the highest value.

  var _getComputedStyle = getComputedStyle(node),
      transitionDuration = _getComputedStyle.transitionDuration,
      transitionDelay = _getComputedStyle.transitionDelay;

  var _map = [transitionDuration, transitionDelay].map(function (value) {
    var _value$split$filter$m = value.split(',') // Remove falseys we can't work with
    .filter(Boolean) // Values are returned as `0.3s` or `75ms`
    .map(function (v) {
      return v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000;
    }).sort(function (a, z) {
      return z - a;
    }),
        _value$split$filter$m2 = _value$split$filter$m[0],
        resolvedValue = _value$split$filter$m2 === void 0 ? 0 : _value$split$filter$m2;

    return resolvedValue;
  }),
      durationMs = _map[0],
      delaysMs = _map[1]; // Waiting for the transition to end. We could use the `transitionend` event, however when no
  // actual transition/duration is defined then the `transitionend` event is not fired.
  //
  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the
  // full 100% speed instead of the 25% or 10%.


  if (durationMs !== 0) {
    d.setTimeout(function () {
      done(Reason.Finished);
    }, durationMs + delaysMs);
  } else {
    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we
    // get disposed.
    done(Reason.Finished);
  } // If we get disposed before the timeout runs we should cleanup anyway


  d.add(function () {
    return done(Reason.Cancelled);
  });
  return d.dispose;
}

function transition(node, base, from, to, done) {
  var d = disposables();

  var _done = done !== undefined ? once(done) : function () {};

  addClasses.apply(void 0, [node].concat(base, from));
  d.nextFrame(function () {
    removeClasses.apply(void 0, [node].concat(from));
    addClasses.apply(void 0, [node].concat(to));
    d.add(waitForTransition(node, function (reason) {
      removeClasses.apply(void 0, [node].concat(to, base));
      return _done(reason);
    }));
  }); // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,
  // the node itself will be nullified and will be a no-op. In case of a full transition the classes
  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition
  // then we have some leftovers that should be cleaned.

  d.add(function () {
    return removeClasses.apply(void 0, [node].concat(base, from, to));
  }); // When we get disposed early, than we should also call the done method but switch the reason.

  d.add(function () {
    return _done(Reason.Cancelled);
  });
  return d.dispose;
}

function useSplitClasses(classes) {
  if (classes === void 0) {
    classes = '';
  }

  return React.useMemo(function () {
    return classes.split(' ').filter(function (className) {
      return className.trim().length > 1;
    });
  }, [classes]);
}

var TransitionContext = /*#__PURE__*/React.createContext(null);
var TreeStates;

(function (TreeStates) {
  TreeStates["Visible"] = "visible";
  TreeStates["Hidden"] = "hidden";
})(TreeStates || (TreeStates = {}));

function useTransitionContext() {
  var context = React.useContext(TransitionContext);

  if (context === null) {
    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.');
  }

  return context;
}

function useParentNesting() {
  var context = React.useContext(NestingContext);

  if (context === null) {
    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition />.');
  }

  return context;
}

var NestingContext = /*#__PURE__*/React.createContext(null);

function useNesting(done) {
  var transitionableChildren = React.useRef([]);
  var mounted = useIsMounted();
  var unregister = React.useCallback(function (childId) {
    var idx = transitionableChildren.current.indexOf(childId);
    if (idx === -1) return;
    transitionableChildren.current.splice(idx, 1);

    if (transitionableChildren.current.length <= 0 && mounted.current) {
      done === null || done === void 0 ? void 0 : done();
    }
  }, [done, mounted, transitionableChildren]);
  var register = React.useCallback(function (childId) {
    transitionableChildren.current.push(childId);
    return function () {
      return unregister(childId);
    };
  }, [transitionableChildren, unregister]);
  return React.useMemo(function () {
    return {
      children: transitionableChildren,
      register: register,
      unregister: unregister
    };
  }, [register, unregister, transitionableChildren]);
}

function TransitionChild(props) {
  var children = props.children,
      enter = props.enter,
      enterFrom = props.enterFrom,
      enterTo = props.enterTo,
      leave = props.leave,
      leaveFrom = props.leaveFrom,
      leaveTo = props.leaveTo,
      rest = _objectWithoutPropertiesLoose(props, ["children", "enter", "enterFrom", "enterTo", "leave", "leaveFrom", "leaveTo"]);

  var container = React.useRef(null);

  var _React$useState = React.useState(TreeStates.Visible),
      state = _React$useState[0],
      setState = _React$useState[1];

  var _useTransitionContext = useTransitionContext(),
      show = _useTransitionContext.show,
      appear = _useTransitionContext.appear;

  var _useParentNesting = useParentNesting(),
      register = _useParentNesting.register,
      unregister = _useParentNesting.unregister;

  var initial = useIsInitialRender();
  var id = useId();
  var isTransitioning = React.useRef(false);
  var nesting = useNesting(React.useCallback(function () {
    // When all children have been unmounted we can only hide ourselves if and only if we are not
    // transitioning ourserlves. Otherwise we would unmount before the transitions are finished.
    if (!isTransitioning.current) {
      setState(TreeStates.Hidden);
      unregister(id);
    }
  }, [id, unregister, isTransitioning]));
  useIsoMorphicEffect(function () {
    return register(id);
  }, [register, id]);
  var enterClasses = useSplitClasses(enter);
  var enterFromClasses = useSplitClasses(enterFrom);
  var enterToClasses = useSplitClasses(enterTo);
  var leaveClasses = useSplitClasses(leave);
  var leaveFromClasses = useSplitClasses(leaveFrom);
  var leaveToClasses = useSplitClasses(leaveTo);
  React.useEffect(function () {
    if (state === TreeStates.Visible && container.current === null) {
      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?');
    }
  }, [container, state]);
  useIsoMorphicEffect(function () {
    var node = container.current;
    if (!node) return; // Skipping initial transition

    if (initial && !appear) return;
    isTransitioning.current = true;
    return show ? transition(node, enterClasses, enterFromClasses, enterToClasses, function () {
      isTransitioning.current = false;
    }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, function (reason) {
      isTransitioning.current = false;
      if (reason !== Reason.Finished) return; // When we don't have children anymore we can safely unregister from the parent and hide
      // ourselves.

      if (nesting.children.current.length <= 0) {
        setState(TreeStates.Hidden);
        unregister(id);
      }
    });
  }, [id, isTransitioning, unregister, nesting, container, initial, appear, show, enterClasses, enterFromClasses, enterToClasses, leaveClasses, leaveFromClasses, leaveToClasses]); // Unmount the whole tree

  if (state === TreeStates.Hidden) return null;

  if (typeof children === 'function') {
    return React.createElement(NestingContext.Provider, {
      value: nesting
    }, children(container));
  }

  var _rest$as = rest.as,
      Component = _rest$as === void 0 ? 'div' : _rest$as,
      passthroughProps = _objectWithoutPropertiesLoose(rest, ["as"]);

  return React.createElement(NestingContext.Provider, {
    value: nesting
  }, React.createElement(Component, Object.assign({}, passthroughProps, {
    ref: container
  }), children));
}

function Transition(props) {
  var _match;

  var show = props.show,
      _props$appear = props.appear,
      appear = _props$appear === void 0 ? false : _props$appear,
      rest = _objectWithoutPropertiesLoose(props, ["show", "appear"]);

  if (![true, false].includes(show)) {
    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.');
  }

  var _React$useState2 = React.useState(show ? TreeStates.Visible : TreeStates.Hidden),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var nestingBag = useNesting(React.useCallback(function () {
    setState(TreeStates.Hidden);
  }, []));
  var initial = useIsInitialRender();
  var transitionBag = React.useMemo(function () {
    return {
      show: show,
      appear: appear || !initial
    };
  }, [show, appear, initial]);
  React.useEffect(function () {
    if (show) {
      setState(TreeStates.Visible);
    } else if (nestingBag.children.current.length <= 0) {
      setState(TreeStates.Hidden);
    }
  }, [show, nestingBag]);
  return React.createElement(NestingContext.Provider, {
    value: nestingBag
  }, React.createElement(TransitionContext.Provider, {
    value: transitionBag
  }, match(state, (_match = {}, _match[TreeStates.Visible] = function () {
    return React.createElement(TransitionChild, Object.assign({}, rest));
  }, _match[TreeStates.Hidden] = null, _match))));
}
Transition.Child = TransitionChild;

exports.Transition = Transition;
//# sourceMappingURL=tailwindui.cjs.development.js.map
