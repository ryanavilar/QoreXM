{"version":3,"sources":["webpack://Sequency/webpack/universalModuleDefinition","webpack://Sequency/webpack/bootstrap","webpack://Sequency/./src/Sequence.ts","webpack://Sequency/./src/all.ts","webpack://Sequency/./src/any.ts","webpack://Sequency/./src/asIterable.ts","webpack://Sequency/./src/associate.ts","webpack://Sequency/./src/associateBy.ts","webpack://Sequency/./src/average.ts","webpack://Sequency/./src/chunk.ts","webpack://Sequency/./src/contains.ts","webpack://Sequency/./src/count.ts","webpack://Sequency/./src/distinct.ts","webpack://Sequency/./src/distinctBy.ts","webpack://Sequency/./src/drop.ts","webpack://Sequency/./src/dropWhile.ts","webpack://Sequency/./src/elementAt.ts","webpack://Sequency/./src/elementAtOrElse.ts","webpack://Sequency/./src/elementAtOrNull.ts","webpack://Sequency/./src/filter.ts","webpack://Sequency/./src/filterIndexed.ts","webpack://Sequency/./src/filterNot.ts","webpack://Sequency/./src/filterNotNull.ts","webpack://Sequency/./src/first.ts","webpack://Sequency/./src/firstOrNull.ts","webpack://Sequency/./src/flatMap.ts","webpack://Sequency/./src/flatten.ts","webpack://Sequency/./src/fold.ts","webpack://Sequency/./src/foldIndexed.ts","webpack://Sequency/./src/forEach.ts","webpack://Sequency/./src/forEachIndexed.ts","webpack://Sequency/./src/groupBy.ts","webpack://Sequency/./src/indexOf.ts","webpack://Sequency/./src/indexOfFirst.ts","webpack://Sequency/./src/indexOfLast.ts","webpack://Sequency/./src/joinToString.ts","webpack://Sequency/./src/last.ts","webpack://Sequency/./src/lastOrNull.ts","webpack://Sequency/./src/map.ts","webpack://Sequency/./src/mapIndexed.ts","webpack://Sequency/./src/mapNotNull.ts","webpack://Sequency/./src/max.ts","webpack://Sequency/./src/maxBy.ts","webpack://Sequency/./src/maxWith.ts","webpack://Sequency/./src/merge.ts","webpack://Sequency/./src/min.ts","webpack://Sequency/./src/minBy.ts","webpack://Sequency/./src/minus.ts","webpack://Sequency/./src/minWith.ts","webpack://Sequency/./src/none.ts","webpack://Sequency/./src/onEach.ts","webpack://Sequency/./src/partition.ts","webpack://Sequency/./src/plus.ts","webpack://Sequency/./src/reduce.ts","webpack://Sequency/./src/reduceIndexed.ts","webpack://Sequency/./src/reverse.ts","webpack://Sequency/./src/single.ts","webpack://Sequency/./src/singleOrNull.ts","webpack://Sequency/./src/sorted.ts","webpack://Sequency/./src/createComparatorFactory.ts","webpack://Sequency/./src/sortedBy.ts","webpack://Sequency/./src/sortedByDescending.ts","webpack://Sequency/./src/sortedDescending.ts","webpack://Sequency/./src/sortedWith.ts","webpack://Sequency/./src/sum.ts","webpack://Sequency/./src/sumBy.ts","webpack://Sequency/./src/take.ts","webpack://Sequency/./src/takeWhile.ts","webpack://Sequency/./src/toArray.ts","webpack://Sequency/./src/toMap.ts","webpack://Sequency/./src/toSet.ts","webpack://Sequency/./src/unzip.ts","webpack://Sequency/./src/withIndex.ts","webpack://Sequency/./src/zip.ts","webpack://Sequency/./src/GeneratorIterator.ts","webpack://Sequency/./src/GeneratorSeedIterator.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFA,mCAA0B;AAC1B,mCAA0B;AAC1B,0CAAwC;AACxC,yCAAsC;AACtC,2CAA0C;AAC1C,uCAAkC;AAClC,qCAA8B;AAC9B,wCAAoC;AACpC,qCAA8B;AAC9B,yCAAoC;AACpC,2CAAwC;AACxC,qCAA4B;AAC5B,0CAAsC;AACtC,0CAAsC;AACtC,gDAAkD;AAClD,gDAAkD;AAClD,uCAAgC;AAChC,8CAA8C;AAC9C,0CAAsC;AACtC,8CAA8C;AAC9C,sCAA8B;AAC9B,4CAA0C;AAC1C,wCAAkC;AAClC,wCAAkC;AAClC,qCAA4B;AAC5B,4CAA0C;AAC1C,wCAAkC;AAClC,+CAAgD;AAChD,wCAAkC;AAClC,wCAAkC;AAClC,6CAA4C;AAC5C,4CAA0C;AAC1C,6CAA4C;AAC5C,qCAA4B;AAC5B,2CAAwC;AACxC,oCAA0B;AAC1B,2CAAwC;AACxC,2CAAwC;AACxC,oCAA0B;AAC1B,sCAA8B;AAC9B,wCAAkC;AAClC,sCAA8B;AAC9B,oCAA0B;AAC1B,sCAA8B;AAC9B,sCAA8B;AAC9B,wCAAkC;AAClC,qCAA4B;AAC5B,uCAAgC;AAChC,0CAAsC;AACtC,qCAA4B;AAC5B,uCAAgC;AAChC,8CAA8C;AAC9C,wCAAkC;AAClC,uCAAgC;AAChC,6CAA4C;AAC5C,uCAAgC;AAChC,yCAAoC;AACpC,mDAAwD;AACxD,iDAAoD;AACpD,2CAAwC;AACxC,oCAA0B;AAC1B,sCAA8B;AAC9B,qCAA4B;AAC5B,0CAAsC;AACtC,wCAAkC;AAClC,sCAA8B;AAC9B,sCAA8B;AAC9B,sCAA8B;AAC9B,0CAAsC;AACtC,oCAA0B;AAC1B,kDAAoD;AACpD,sDAA4D;AAsB5D;IACI,sBAAqB,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;IAC1C,CAAC;IACL,mBAAC;AAAD,CAAC;AAED,WAAW,CAAC,YAAY,EAAE,CAAC,SAAG,EAAE,SAAG,EAAE,uBAAU,EAAE,qBAAS,EAAE,yBAAW,EAAE,iBAAO,EAAE,aAAK,EAAE,mBAAQ,EAAE,aAAK,EAAE,mBAAQ,EAAE,uBAAU,EAAE,WAAI;IAChI,qBAAS,EAAE,qBAAS,EAAE,iCAAe,EAAE,iCAAe,EAAE,eAAM,EAAE,6BAAa,EAAE,qBAAS,EAAE,6BAAa,EAAE,aAAK,EAAE,yBAAW,EAAE,iBAAO,EAAE,iBAAO,EAAE,WAAI,EAAE,yBAAW;IAChK,iBAAO,EAAE,+BAAc,EAAE,iBAAO,EAAE,iBAAO,EAAE,2BAAY,EAAE,yBAAW,EAAE,2BAAY,EAAE,WAAI,EAAE,uBAAU,EAAE,SAAG,EAAE,uBAAU,EAAE,uBAAU,EAAE,SAAG,EAAE,aAAK,EAAE,iBAAO,EAAE,aAAK,EAAE,SAAG,EAAE,aAAK;IACzK,aAAK,EAAE,iBAAO,EAAE,WAAI,EAAE,eAAM,EAAE,qBAAS,EAAE,WAAI,EAAE,eAAM,EAAE,6BAAa,EAAE,iBAAO,EAAE,eAAM,EAAE,2BAAY,EAAE,eAAM,EAAE,mBAAQ,EAAE,uCAAkB,EAAE,mCAAgB,EAAE,uBAAU;IACvK,SAAG,EAAE,aAAK,EAAE,WAAI,EAAE,qBAAS,EAAE,iBAAO,EAAE,aAAK,EAAE,aAAK,EAAE,aAAK,EAAE,qBAAS,EAAE,SAAG,CAAC,CAAC,CAAC;AAEhF,qBAAqB,WAAgB,EAAE,SAAgB;IACnD,SAAS,CAAC,OAAO,CAAC,kBAAQ;QACtB,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,cAAI;YACvD,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAED;IAA8B,cAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,yBAAiB;;IAC3C,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAFD,gCAEC;AAED;IACI,OAAO,UAAU,CAAC,EAAE,CAAC,CAAC;AAC1B,CAAC;AAFD,sCAEC;AAED,oBAA8B,QAAqB;IAC/C,IAAI,QAAQ,KAAK,IAAI,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC7D;IACD,IAAI,QAAQ,KAAK,SAAS,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAClE;IACD,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,QAAQ,CAAC,CAAC;KACjF;IACD,IAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC7C,OAAO,cAAc,CAAI,QAAQ,CAAC,CAAC;AACvC,CAAC;AAZD,gCAYC;AAED,wBAAkC,QAAqB;IACnD,OAAO,IAAI,YAAY,CAAC,QAAQ,CAAQ,CAAC;AAC7C,CAAC;AAFD,wCAEC;AAED,oBAA8B,MAAW;IACrC,OAAO,MAAM,YAAY,YAAY,CAAC;AAC1C,CAAC;AAFD,gCAEC;AAED,wBAA+B,KAAqB;IAChD,WAAW,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACvC,CAAC;AAFD,wCAEC;AAKD,0BAAoC,CAAM,EAAE,CAAO;IAC/C,IAAI,OAAO,CAAC,KAAK,UAAU,IAAI,CAAC,IAAI,IAAI,EAAE;QACtC,OAAO,cAAc,CAAI,IAAI,2BAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;KACtD;IACD,IAAM,IAAI,GAAG,OAAO,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,OAAO,IAAI,IAAI,IAAI;QACf,CAAC,CAAC,cAAc,CAAI,IAAI,+BAAqB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,aAAa,EAAK,CAAC;AAC7B,CAAC;AARD,4CAQC;AAED,eAAsB,KAAa,EAAE,YAAoB,EAAE,IAAgB;IAAhB,+BAAgB;IACvE,IAAI,KAAK,GAAG,YAAY,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,YAAU,KAAK,2CAAsC,YAAY,MAAG,CAAC,CAAC;KACzF;IACD,IAAI,KAAK,KAAK,YAAY,EAAE;QACxB,OAAO,aAAa,EAAE,CAAC;KAC1B;IACD,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,OAAO,gBAAgB,CAAC;QACpB,IAAI;YACA,OAAO,OAAO,IAAI,YAAY;gBAC1B,CAAC,CAAC,OAAO;gBACT,CAAC,CAAC,SAAS,CAAC;SACnB;gBAAS;YACN,OAAO,IAAI,IAAI,CAAC;SACnB;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAjBD,sBAiBC;;;;;;;;AC9KD;IAAA;IAiBA,CAAC;IAfG;;;;;OAKG;IACH,iBAAG,GAAH,UAA0B,SAA+B;QACrD,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACxB,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,UAAC;AAAD,CAAC;AAjBY,kBAAG;;;;;;;;ACAhB;IAAA;IAoBA,CAAC;IAlBG;;;;;OAKG;IACH,iBAAG,GAAH,UAA0B,SAAgC;QACtD,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;SACrC;QACD,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACvB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEL,UAAC;AAAD,CAAC;AApBY,kBAAG;;;;;;;;ACAhB;IAAA;IAgBA,CAAC;IAdG;;;;OAIG;IACH,+BAAU,GAAV;;QACI,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B;YACI,GAAC,MAAM,CAAC,QAAQ,IAAhB;gBACI,OAAO,QAAQ,CAAC;YACpB,CAAC;eACH;IACN,CAAC;IAEL,iBAAC;AAAD,CAAC;AAhBY,gCAAU;;;;;;;;ACAvB;IAAA;IAkBA,CAAC;IAhBG;;;;;;OAMG;IACH,6BAAS,GAAT,UAAsC,SAA+B;QACjE,IAAM,MAAM,GAAG,IAAI,GAAG,EAAQ,CAAC;QAC/B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,gBAAC;AAAD,CAAC;AAlBY,8BAAS;;;;;;;;ACAtB;IAAA;IAwDA,CAAC;IAlBG,iCAAW,GAAX,UACqB,aAAkB,EAClB,cAAgC;QACjD,IAAM,QAAQ,GAAG,OAAO,aAAa,KAAK,UAAU;YAChD,CAAC,CAAC,aAAa;YACf,CAAC,CAAC,UAAC,KAAQ,IAAK,YAAK,CAAC,aAAwB,CAAC,EAA/B,CAA+B,CAAC;QACpD,IAAM,MAAM,GAAG,IAAI,GAAG,EAAY,CAAC;QACnC,IAAM,SAAS,GAAG,cAAc,IAAI,IAAI;YACpC,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,UAAC,KAAQ,IAAK,YAAK,EAAL,CAAK,CAAC;QAC1B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,kBAAC;AAAD,CAAC;AAxDY,kCAAW;;;;;;;;ACAxB;IAAA;IAmBA,CAAC;IAjBG;;;;OAIG;IACH,yBAAO,GAAP;QACI,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC;YAClB,KAAK,EAAE,CAAC;SACX;QACD,OAAO,KAAK,KAAK,CAAC;YACd,CAAC,CAAC,MAAM,CAAC,GAAG;YACZ,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;IACtB,CAAC;IAEL,cAAC;AAAD,CAAC;AAnBY,0BAAO;;;;;;;;ACApB;IAAA;IA2BA,CAAC;IAzBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA4B,SAAiB;QACzC,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,SAAS,CAAC,CAAC;SAChE;QACD,IAAM,MAAM,GAAoB,EAAE,CAAC;QACnC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;YACjD,IAAI,MAAM,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE;gBAC5B,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACrC;iBAAM;gBACH,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACvC;YACD,KAAK,EAAE,CAAC;SACX;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,YAAC;AAAD,CAAC;AA3BY,sBAAK;;;;;;;;ACAlB;IAAA;IAiBA,CAAC;IAfG;;;;;OAKG;IACH,2BAAQ,GAAR,UAA+B,OAAU;QACrC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,OAAO,KAAK,IAAI,CAAC,KAAK,EAAE;gBACxB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEL,eAAC;AAAD,CAAC;AAjBY,4BAAQ;;;;;;;;ACArB;IAAA;IAyBA,CAAC;IAvBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA4B,SAAgC;QACxD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;gBAC3E,GAAG,EAAE,CAAC;aACT;SACJ;aAAM;YACH,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;gBAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACvB,GAAG,EAAE,CAAC;iBACT;aACJ;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,YAAC;AAAD,CAAC;AAzBY,sBAAK;;;;;;;;ACFlB,wCAAoD;AAEpD;IAGI,0BAA6B,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;QAF1C,UAAK,GAAa,EAAE,CAAC;IAG7B,CAAC;IAED,+BAAI,GAAJ,UAAK,KAAW;QACZ,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5B,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;SACJ;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,uBAAC;AAAD,CAAC;AAED;IAAA;IAWA,CAAC;IATG;;;;OAIG;IACH,2BAAQ,GAAR;QACI,OAAO,yBAAc,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEL,eAAC;AAAD,CAAC;AAXY,4BAAQ;;;;;;;;ACnBrB,wCAAoD;AAEpD;IAGI,4BAA6B,QAAqB,EACrB,QAAwB;QADxB,aAAQ,GAAR,QAAQ,CAAa;QACrB,aAAQ,GAAR,QAAQ,CAAgB;QAH7C,SAAI,GAAa,EAAE,CAAC;IAI5B,CAAC;IAED,iCAAI,GAAJ,UAAK,KAAW;QACZ,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;SACJ;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,yBAAC;AAAD,CAAC;AAED;IAAA;IAaA,CAAC;IAXG;;;;;;OAMG;IACH,+BAAU,GAAV,UAAoC,QAAwB;QACxD,OAAO,yBAAc,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEL,iBAAC;AAAD,CAAC;AAbY,gCAAU;;;;;;;;ACnBvB;IAAA;IAcA,CAAC;IAZG;;;;;OAKG;IACH,mBAAI,GAAJ,UAA2B,CAAS;QAChC,OAAO,IAAI,CAAC,SAAS,EAAE;aAClB,SAAS,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,GAAG,CAAC,EAAZ,CAAY,CAAC;aAC7B,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;IAC7B,CAAC;IAEL,WAAC;AAAD,CAAC;AAdY,oBAAI;;;;;;;;ACFjB,wCAAoD;AAEpD;IAGI,2BAA6B,QAAqB,EACrB,SAA+B;QAD/B,aAAQ,GAAR,QAAQ,CAAa;QACrB,cAAS,GAAT,SAAS,CAAsB;QAHpD,aAAQ,GAAG,IAAI,CAAC;IAIxB,CAAC;IAED,gCAAI,GAAJ,UAAK,KAAW;QACZ,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;YACD,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,EAAE;gBACT,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;SACJ;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,wBAAC;AAAD,CAAC;AAED;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,6BAAS,GAAT,UAAgC,SAA+B;QAC3D,OAAO,yBAAc,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEL,gBAAC;AAAD,CAAC;AAZY,8BAAS;;;;;;;;ACtBtB;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,6BAAS,GAAT,UAAgC,KAAa;QACzC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,CAAC,KAAK,KAAK,EAAE;gBACb,OAAO,IAAI,CAAC,KAAK,CAAC;aACrB;YACD,CAAC,EAAE,CAAC;SACP;QACD,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,KAAK,CAAC,CAAC;IACrD,CAAC;IAEL,gBAAC;AAAD,CAAC;AApBY,8BAAS;;;;;;;;ACAtB;IAAA;IAqBA,CAAC;IAnBG;;;;;;;OAOG;IACH,yCAAe,GAAf,UAAsC,KAAa,EAAE,YAAkC;QACnF,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,CAAC,KAAK,KAAK,EAAE;gBACb,OAAO,IAAI,CAAC,KAAK,CAAC;aACrB;YACD,CAAC,EAAE,CAAC;SACP;QACD,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEL,sBAAC;AAAD,CAAC;AArBY,0CAAe;;;;;;;;ACA5B;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,yCAAe,GAAf,UAAsC,KAAa;QAC/C,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,CAAC,KAAK,KAAK,EAAE;gBACb,OAAO,IAAI,CAAC,KAAK,CAAC;aACrB;YACD,CAAC,EAAE,CAAC;SACP;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,sBAAC;AAAD,CAAC;AApBY,0CAAe;;;;;;;;ACF5B,wCAAoD;AAEpD;IACI,wBAA6B,SAA+B,EAC/B,QAAqB;QADrB,cAAS,GAAT,SAAS,CAAsB;QAC/B,aAAQ,GAAR,QAAQ,CAAa;IAClD,CAAC;IAED,6BAAI,GAAJ,UAAK,KAAW;QACZ,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC5B,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;SACJ;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,qBAAC;AAAD,CAAC;AAED;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,uBAAM,GAAN,UAA6B,SAA+B;QACxD,OAAO,yBAAc,CAAC,IAAI,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxE,CAAC;IAEL,aAAC;AAAD,CAAC;AAZY,wBAAM;;;;;;;;ACfnB;IAAA;IAcA,CAAC;IAZG;;;;;OAKG;IACH,qCAAa,GAAb,UAAoC,SAA+C;QAC/E,OAAO,IAAI,CAAC,SAAS,EAAE;aAClB,MAAM,CAAC,YAAE,IAAI,gBAAS,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAA7B,CAA6B,CAAC;aAC3C,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;IAC7B,CAAC;IAEL,oBAAC;AAAD,CAAC;AAdY,sCAAa;;;;;;;;ACA1B;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,6BAAS,GAAT,UAAgC,SAAgC;QAC5D,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,KAAQ,IAAK,QAAC,SAAS,CAAC,KAAK,CAAC,EAAjB,CAAiB,CAAC,CAAC;IACxD,CAAC;IAEL,gBAAC;AAAD,CAAC;AAZY,8BAAS;;;;;;;;ACAtB;IAAA;IAWA,CAAC;IATG;;;;OAIG;IACH,qCAAa,GAAb;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,KAAK,IAAI,EAAX,CAAW,CAAgB,CAAC;IACzD,CAAC;IAEL,oBAAC;AAAD,CAAC;AAXY,sCAAa;;;;;;;;ACA1B;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA4B,SAAgC;QACxD,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,CAAC;SACzC;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEL,YAAC;AAAD,CAAC;AApBY,sBAAK;;;;;;;;ACAlB;IAAA;IA4BA,CAAC;IA1BG;;;;;OAKG;IACH,iCAAW,GAAX,UAAkC,SAAgC;QAC9D,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;SAC/C;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI;YACZ,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,0BAAI,GAAJ,UAA2B,SAAgC;QACvD,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAEL,kBAAC;AAAD,CAAC;AA5BY,kCAAW;;;;;;;;ACFxB,wCAAoD;AAEpD;IAGI,yBAA6B,SAAmC,EACnC,QAAqB;QADrB,cAAS,GAAT,SAAS,CAA0B;QACnC,aAAQ,GAAR,QAAQ,CAAa;IAClD,CAAC;IAED,8BAAI,GAAJ,UAAK,KAAW;QACZ,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;YACtB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACZ,OAAO,IAAI,CAAC;aACf;SACJ;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC;YACjC,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;SACtB;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,sBAAC;AAAD,CAAC;AAED;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,yBAAO,GAAP,UAAiC,SAAoC;QACjE,OAAO,yBAAc,CAAC,IAAI,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEL,cAAC;AAAD,CAAC;AAZY,0BAAO;;;;;;;;AC1BpB,wCAA4D;AAE5D;IAAA;IAiBA,CAAC;IAfG;;;;OAIG;IACH,yBAAO,GAAP;QACI,OAAO,IAAI,CAAC,OAAO,CAAC,YAAE;YAClB,IAAI,qBAAU,CAAC,EAAE,CAAC,EAAE;gBAChB,OAAO,EAAE,CAAC;aACb;iBAAM;gBACH,OAAO,qBAAU,CAAC,EAAE,CAAC,CAAC;aACzB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,cAAC;AAAD,CAAC;AAjBY,0BAAO;;;;;;;;ACApB;IAAA;IAmBA,CAAC;IAjBG;;;;;;;;OAQG;IACH,mBAAI,GAAJ,UAA8B,OAAU,EAAE,SAAoC;QAC1E,IAAI,MAAM,GAAG,OAAO,CAAC;QACrB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,WAAC;AAAD,CAAC;AAnBY,oBAAI;;;;;;;;ACAjB;IAAA;IAsBA,CAAC;IApBG;;;;;;;;;OASG;IACH,iCAAW,GAAX,UAAqC,OAAU,EAAE,SAAmD;QAChG,IAAI,MAAM,GAAG,OAAO,CAAC;QACrB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9C,KAAK,EAAE,CAAC;SACX;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,kBAAC;AAAD,CAAC;AAtBY,kCAAW;;;;;;;;ACAxB;IAAA;IAaA,CAAC;IAXG;;;;OAIG;IACH,yBAAO,GAAP,UAA8B,MAAyB;QACnD,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;IACL,CAAC;IAEL,cAAC;AAAD,CAAC;AAbY,0BAAO;;;;;;;;ACApB;IAAA;IAaA,CAAC;IAXG;;;;;OAKG;IACH,uCAAc,GAAd,UAAqC,MAAyC;QAC1E,IAAI,CAAC,SAAS,EAAE;aACX,OAAO,CAAC,YAAE,IAAI,aAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACnD,CAAC;IAEL,qBAAC;AAAD,CAAC;AAbY,wCAAc;;;;;;;;ACA3B;IAAA;IAsBA,CAAC;IApBG;;;;;OAKG;IACH,yBAAO,GAAP,UAAiC,WAA4B;QACzD,IAAM,MAAM,GAAG,IAAI,GAAG,EAAe,CAAC;QACtC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACjC;iBAAM;gBACH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1B;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,cAAC;AAAD,CAAC;AAtBY,0BAAO;;;;;;;;ACApB;IAAA;IAmBA,CAAC;IAjBG;;;;;OAKG;IACH,yBAAO,GAAP,UAA8B,OAAU;QACpC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,OAAO,KAAK,IAAI,CAAC,KAAK,EAAE;gBACxB,OAAO,KAAK,CAAC;aAChB;YACD,KAAK,EAAE,CAAC;SACX;QACD,OAAO,CAAC,CAAC,CAAC;IACd,CAAC;IAEL,cAAC;AAAD,CAAC;AAnBY,0BAAO;;;;;;;;ACApB;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,mCAAY,GAAZ,UAAmC,SAAgC;QAC/D,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACvB,OAAO,KAAK,CAAC;aAChB;YACD,KAAK,EAAE,CAAC;SACX;QACD,OAAO,CAAC,CAAC,CAAC;IACd,CAAC;IAEL,mBAAC;AAAD,CAAC;AApBY,oCAAY;;;;;;;;ACAzB;IAAA;IAqBA,CAAC;IAnBG;;;;;;OAMG;IACH,iCAAW,GAAX,UAAkC,SAAgC;QAC9D,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC;QAChB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACvB,MAAM,GAAG,KAAK,CAAC;aAClB;YACD,KAAK,EAAE,CAAC;SACX;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,kBAAC;AAAD,CAAC;AArBY,kCAAW;;;;;;;;ACUxB,IAAM,QAAQ,GAAG;IACb,KAAK,EAAE,EAAE;IACT,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,EAAE;IACV,OAAO,EAAE,EAAE;IACX,KAAK,EAAE,CAAC,CAAC;IACT,SAAS,EAAE,KAAK;IAChB,SAAS,EAAE,SAAS;CACvB,CAAC;AAEF;IAAA;IAsDA,CAAC;IApDG;;;;;OAKG;IACH,mCAAY,GAAZ,UAAmC,MAAgC;QAAhC,0CAAgC;QAE3D,qBAAsB,EAAtB,2CAAsB,EACtB,qBAA8B,EAA9B,mDAA8B,EAC9B,kBAAwB,EAAxB,6CAAwB,EACxB,mBAA0B,EAA1B,+CAA0B,EAC1B,iBAAsB,EAAtB,2CAAsB,EACtB,qBAA8B,EAA9B,mDAA8B,EAC9B,qBAA8B,EAA9B,mDAA8B,CACvB;QAEX,IAAI,MAAM,GAAG,KAAG,KAAK,GAAG,MAAQ,CAAC;QACjC,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,KAAK,EAAE,CAAC;YACR,IAAI,KAAK,GAAG,CAAC,EAAE;gBACX,MAAM,IAAI,SAAS,CAAC;aACvB;YACD,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,KAAK,EAAE;gBAC7B,MAAM,IAAI,SAAS,IAAI,IAAI;oBACvB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;oBACvB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC5B;iBAAM;gBACH,MAAM;aACT;SACJ;QAED,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,KAAK,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC;SACvB;QAED,MAAM,IAAI,OAAO,CAAC;QAClB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,6BAAM,GAAN,UAA6B,MAAgC;QAAhC,0CAAgC;QACzD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAEL,mBAAC;AAAD,CAAC;AAtDY,oCAAY;;;;;;;;ACpBzB;IAAA;IAyBA,CAAC;IAvBG;;;;;;OAMG;IACH,mBAAI,GAAJ,UAA2B,SAAiC;QACxD,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;SACxC;QACD,IAAI,MAAS,CAAC;QACd,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;YACpB,KAAK,GAAG,KAAK,CAAC;SACjB;QACD,IAAI,KAAK,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;QACD,OAAO,MAAO,CAAC;IACnB,CAAC;IAEL,WAAC;AAAD,CAAC;AAzBY,oBAAI;;;;;;;;ACAjB;IAAA;IA6BA,CAAC;IA3BG;;;;;OAKG;IACH,+BAAU,GAAV,UAAiC,SAAiC;QAC9D,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;SAC9C;QACD,IAAI,MAAM,GAAa,IAAI,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;SACvB;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,6BAAQ,GAAR,UAA+B,SAAiC;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAEL,iBAAC;AAAD,CAAC;AA7BY,gCAAU;;;;;;;;ACFvB,wCAAoD;AAEpD;IACI,qBAA6B,SAAyB,EACzB,QAAqB;QADrB,cAAS,GAAT,SAAS,CAAgB;QACzB,aAAQ,GAAR,QAAQ,CAAa;IAClD,CAAC;IAED,0BAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI;YACZ,CAAC,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC;YACvC,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC,CAAC;IAC3D,CAAC;IACL,kBAAC;AAAD,CAAC;AAED;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,iBAAG,GAAH,UAA6B,SAA4B;QACrD,OAAO,yBAAc,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAEL,UAAC;AAAD,CAAC;AAZY,kBAAG;;;;;;;;ACbhB;IAAA;IAaA,CAAC;IAXG;;;;;OAKG;IACH,+BAAU,GAAV,UAAoC,SAAyC;QACzE,OAAO,IAAI,CAAC,SAAS,EAAE;aAClB,GAAG,CAAC,YAAE,IAAI,gBAAS,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAClD,CAAC;IAEL,iBAAC;AAAD,CAAC;AAbY,gCAAU;;;;;;;;ACFvB,wCAA+D;AAE/D;IAAA;IAkBA,CAAC;IAhBG;;;;;;OAMG;IACH,+BAAU,GAAV,UAAoC,SAAiC;QACjE,OAAO,IAAI,CAAC,OAAO,CAAC,UAAC,KAAQ;YACzB,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAC9B,OAAO,IAAI,KAAK,IAAI;gBAChB,CAAC,CAAC,qBAAU,CAAC,IAAI,CAAC;gBAClB,CAAC,CAAC,wBAAa,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,iBAAC;AAAD,CAAC;AAlBY,gCAAU;;;;;;;;ACAvB;IAAA;IAiBA,CAAC;IAfG;;;;OAIG;IACH,iBAAG,GAAH;QACI,IAAI,MAAM,GAAa,IAAI,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,EAAE;gBACvC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;aACvB;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,UAAC;AAAD,CAAC;AAjBY,kBAAG;;;;;;;;ACAhB;IAAA;IAsBA,CAAC;IApBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA+B,QAAyB;QACpD,IAAI,GAAG,GAAa,IAAI,CAAC;QACzB,IAAI,WAAW,GAAa,IAAI,CAAC;QACjC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,WAAW,IAAI,IAAI,IAAI,KAAK,GAAG,WAAW,EAAE;gBAC5C,WAAW,GAAG,KAAK,CAAC;gBACpB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;aACpB;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,YAAC;AAAD,CAAC;AAtBY,sBAAK;;;;;;;;ACAlB;IAAA;IAkBA,CAAC;IAhBG;;;;;OAKG;IACH,yBAAO,GAAP,UAA8B,OAA+B;QACzD,IAAI,GAAG,GAAa,IAAI,CAAC;QACzB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC7C,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;aACpB;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,cAAC;AAAD,CAAC;AAlBY,0BAAO;;;;;;;;ACFpB,wCAA4D;AAE5D;IAAA;IAoCA,CAAC;IAlCG;;;;;;;;;;OAUG;IACH,qBAAK,GAAL,UAA+B,KAAgC,EAAE,QAAyB,EAAE,gBAAiC;QAAjC,2DAAiC;QACzH,IAAI,WAAW,GAAG,qBAAU,CAAC,KAAK,CAAC;YAC/B,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;YACjB,CAAC,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;QAClC,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAClC,IAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,cAAI;YAC9B,IAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YAChC,IAAM,KAAK,GAAG,qBAAU,CAAC,WAAW,CAAC;iBAChC,IAAI,CAAC,YAAE,IAAI,eAAQ,CAAC,EAAE,CAAC,KAAK,QAAQ,EAAzB,CAAyB,CAAC,CAAC;YAC3C,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,KAAK,KAAK,EAAZ,CAAY,CAAC,CAAC;gBACrD,OAAO,KAAK,CAAC;aAChB;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC,CAAC,CAAC;QACH,IAAI,gBAAgB,EAAE;YAClB,OAAO,qBAAU,CAAK,WAAW,QAAK,MAAM,EAAE,CAAC;SAClD;aAAM;YACH,OAAO,qBAAU,CAAK,MAAM,QAAK,WAAW,EAAE,CAAC;SAClD;IACL,CAAC;IAEL,YAAC;AAAD,CAAC;AApCY,sBAAK;;;;;;;;ACAlB;IAAA;IAiBA,CAAC;IAfG;;;;OAIG;IACH,iBAAG,GAAH;QACI,IAAI,MAAM,GAAa,IAAI,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,EAAE;gBACvC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;aACvB;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,UAAC;AAAD,CAAC;AAjBY,kBAAG;;;;;;;;ACAhB;IAAA;IAsBA,CAAC;IApBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA+B,QAAyB;QACpD,IAAI,GAAG,GAAa,IAAI,CAAC;QACzB,IAAI,WAAW,GAAa,IAAI,CAAC;QACjC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,WAAW,IAAI,IAAI,IAAI,KAAK,GAAG,WAAW,EAAE;gBAC5C,WAAW,GAAG,KAAK,CAAC;gBACpB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;aACpB;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,YAAC;AAAD,CAAC;AAtBY,sBAAK;;;;;;;;ACFlB,wCAAgD;AAEhD;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA4B,IAAgC;QACxD,IAAI,qBAAU,CAAC,IAAI,CAAC,EAAE;YAClB,IAAM,OAAK,GAAa,IAAI,CAAC,OAAO,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,cAAK,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;SACnD;aAAM,IAAI,IAAI,YAAY,KAAK,EAAE;YAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,WAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,EAApB,CAAoB,CAAC,CAAC;SAClD;aAAM;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,KAAK,IAAI,EAAX,CAAW,CAAC,CAAC;SACzC;IACL,CAAC;IAEL,YAAC;AAAD,CAAC;AApBY,sBAAK;;;;;;;;ACAlB;IAAA;IAkBA,CAAC;IAhBG;;;;;OAKG;IACH,yBAAO,GAAP,UAA8B,OAA+B;QACzD,IAAI,GAAG,GAAa,IAAI,CAAC;QACzB,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC7C,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;aACpB;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,cAAC;AAAD,CAAC;AAlBY,0BAAO;;;;;;;;ACApB;IAAA;IAqBA,CAAC;IAnBG;;;;;;OAMG;IACH,mBAAI,GAAJ,UAA2B,SAAiC;QACxD,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;SACpC;QACD,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACvB,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,WAAC;AAAD,CAAC;AArBY,oBAAI;;;;;;;;ACAjB;IAAA;IAeA,CAAC;IAbG;;;;;OAKG;IACH,uBAAM,GAAN,UAA6B,MAA0B;QACnD,OAAO,IAAI,CAAC,GAAG,CAAC,YAAE;YACd,MAAM,CAAC,EAAE,CAAC,CAAC;YACX,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,aAAC;AAAD,CAAC;AAfY,wBAAM;;;;;;;;ACAnB;IAAA;IAsBA,CAAC;IApBG;;;;;;OAMG;IACH,6BAAS,GAAT,UAAgC,SAAgC;QAC5D,IAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAM,UAAU,GAAa,EAAE,CAAC;QAChC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC9B;iBAAM;gBACH,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;SACJ;QACD,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;IACtD,CAAC;IAEL,gBAAC;AAAD,CAAC;AAtBY,8BAAS;;;;;;;;ACFtB,wCAAgE;AAEhE;IACI,wBAA6B,KAAkB,EAClB,MAAmB;QADnB,UAAK,GAAL,KAAK,CAAa;QAClB,WAAM,GAAN,MAAM,CAAa;IAChD,CAAC;IAED,6BAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACb,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC;SAC5C;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACb,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC;SAC5C;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,qBAAC;AAAD,CAAC;AAED;IAAA;IAsCA,CAAC;IAZG,mBAAI,GAAJ,UAA2B,IAAgC;QACvD,IAAI,qBAAU,CAAC,IAAI,CAAC,EAAE;YAClB,OAAO,yBAAc,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3E;aAAM,IAAI,IAAI,YAAY,KAAK,EAAE;YAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzC,OAAO,yBAAc,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SACtE;aAAM;YACH,IAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC3C,OAAO,yBAAc,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SACtE;IACL,CAAC;IAEL,WAAC;AAAD,CAAC;AAtCY,oBAAI;;;;;;;;AClBjB;IAAA;IAuBA,CAAC;IArBG;;;;;;;;OAQG;IACH,uBAAM,GAAN,UAA0C,SAAkC;QACxE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,KAAK,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,IAAI,MAAM,GAAM,KAAK,CAAC,KAAK,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,aAAC;AAAD,CAAC;AAvBY,wBAAM;;;;;;;;ACAnB;IAAA;IAyBA,CAAC;IAvBG;;;;;;;;OAQG;IACH,qCAAa,GAAb,UAAiD,SAAmD;QAChG,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,KAAK,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAM,KAAK,CAAC,KAAK,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9C,KAAK,EAAE,CAAC;SACX;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,oBAAC;AAAD,CAAC;AAzBY,sCAAa;;;;;;;;ACA1B;IAAA;IAaA,CAAC;IAXG;;;;OAIG;IACH,yBAAO,GAAP;QACI,OAAO,IAAI,CAAC,SAAS,EAAE;aAClB,kBAAkB,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,EAAR,CAAQ,CAAC;aAClC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;IAC7B,CAAC;IAEL,cAAC;AAAD,CAAC;AAbY,0BAAO;;;;;;;;ACApB;IAAA;IAwBA,CAAC;IAtBG;;;;;;;OAOG;IACH,uBAAM,GAAN,UAA6B,SAAiC;QAC1D,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;SAC1C;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,KAAK,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;QACD,OAAO,KAAK,CAAC,KAAK,CAAC;IACvB,CAAC;IAEL,aAAC;AAAD,CAAC;AAxBY,wBAAM;;;;;;;;ACAnB;IAAA;IAwBA,CAAC;IAtBG;;;;;;;OAOG;IACH,mCAAY,GAAZ,UAAmC,SAAiC;QAChE,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,EAAE,CAAC;SAChD;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,KAAK,CAAC,IAAI,EAAE;YACZ,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YAC5B,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC,KAAK,CAAC;IACvB,CAAC;IAEL,mBAAC;AAAD,CAAC;AAxBY,oCAAY;;;;;;;;ACFzB,wCAAoD;AAGpD,wDAAgE;AAEhE;IAAA;IAwBA,CAAC;IAtBG;;;;;OAKG;IACH,uBAAM,GAAN,UAA6B,iBAAoE;QAC7F,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,IAAI,iBAAiB,IAAI,IAAI,EAAE;YAC3B,MAAM,CAAC,IAAI,EAAE,CAAC;SACjB;aAAM;YACH,IAAM,OAAO,GAAyB,iCAAuB,EAAK,CAAC;YACnE,IAAM,UAAU,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC3B;QACD,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,OAAO,yBAAc,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEL,aAAC;AAAD,CAAC;AAxBY,wBAAM;;;;;;;;ACFnB,iBAAoB,UAAkC;IAClD,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE;QAC7B,QAAQ,EAAR;YACI,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI,IAAK,iBAAU,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAArB,CAAqB,CACxC,CAAC;QACN,CAAC;QACD,IAAI,EAAJ,UAAK,cAAsC;YACvC,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI;gBACP,IAAM,MAAM,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChC,OAAO,MAAM,KAAK,CAAC;oBACf,CAAC,CAAC,MAAM;oBACR,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,CAAC,CACJ,CAAC;QACN,CAAC;QACD,cAAc,EAAd,UAAe,cAAsC;YACjD,OAAO,IAAI,CAAC,IAAI,CACZ,OAAO,CAAC,cAAc,CAAC;iBAClB,QAAQ,EAAE,CAClB,CAAC;QACN,CAAC;QACD,MAAM,EAAN,UAAO,aAAkB;YACrB,IAAM,QAAQ,GAAG,UAAU,CAAI,aAAa,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,IAAI,CACZ,UAAC,CAAI,EAAE,CAAI,IAAK,qBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAC3D,CAAC;QACN,CAAC;QACD,gBAAgB,EAAhB,UAAiB,aAAkB;YAC/B,IAAM,QAAQ,GAAG,UAAU,CAAI,aAAa,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,IAAI,CACZ,OAAO,CACH,UAAC,CAAI,EAAE,CAAI,IAAK,qBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAC3D,CAAC,QAAQ,EAAE,CACf,CAAC;QACN,CAAC;KACJ,CAAC,CAAC;AACP,CAAC;AAED,mBAAsB,aAAkB;IACpC,IAAM,QAAQ,GAAG,UAAU,CAAI,aAAa,CAAC,CAAC;IAC9C,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI,IAAK,qBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAC3D,CAAC;AACN,CAAC;AAED,6BAAgC,aAAkB;IAC9C,IAAM,QAAQ,GAAG,UAAU,CAAI,aAAa,CAAC,CAAC;IAC9C,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI,IAAK,qBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAxC,CAAwC,CAC3D,CAAC;AACN,CAAC;AAED,oBAAuB,aAAwC;IAC3D,OAAO,OAAO,aAAa,KAAK,UAAU;QACtC,CAAC,CAAC,aAAa;QACf,CAAC,CAAC,UAAC,IAAO,IAAK,OAAC,IAAY,CAAC,aAAuB,CAAC,EAAtC,CAAsC,CAAC;AAC9D,CAAC;AAED,wBAA2B,CAAI,EAAE,CAAI;IACjC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC;AAED;IACI,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC;AACnC,CAAC;AAED;IACI,OAAO,OAAO,CAAI,cAAc,CAAC,CAAC,QAAQ,EAAE,CAAC;AACjD,CAAC;AAED;IACI,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI,IAAK,QAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAApC,CAAoC,CACvD,CAAC;AACN,CAAC;AAED;IACI,OAAO,OAAO,CACV,UAAC,CAAI,EAAE,CAAI,IAAK,QAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAApC,CAAoC,CACvD,CAAC;AACN,CAAC;AAED;IACI,OAAO;QACH,OAAO;QACP,SAAS;QACT,mBAAmB;QACnB,YAAY;QACZ,YAAY;QACZ,UAAU;QACV,SAAS;KACZ,CAAC;AACN,CAAC;AAED,kBAAe,uBAAuB,CAAC;;;;;;;;ACjGvC;IAAA;IAaA,CAAC;IAXG;;;;;;OAMG;IACH,2BAAQ,GAAR,UAAkC,QAAyB;QACvD,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAtB,CAAsB,CAAC,CAAC;IACrD,CAAC;IAEL,eAAC;AAAD,CAAC;AAbY,4BAAQ;;;;;;;;ACArB;IAAA;IAaA,CAAC;IAXG;;;;;;OAMG;IACH,+CAAkB,GAAlB,UAA4C,QAAyB;QACjE,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAhC,CAAgC,CAAC,CAAC;IAC/D,CAAC;IAEL,yBAAC;AAAD,CAAC;AAbY,gDAAkB;;;;;;;;ACA/B;IAAA;IAWA,CAAC;IATG;;;;OAIG;IACH,2CAAgB,GAAhB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,CAAC,YAAY,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAEL,uBAAC;AAAD,CAAC;AAXY,4CAAgB;;;;;;;;ACA7B;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,+BAAU,GAAV,UAAiC,UAAkC;QAC/D,OAAO,IAAI,CAAC,MAAM,CAAC,YAAE,IAAI,SAAE,CAAC,OAAO,CAAC,UAAU,CAAC,EAAtB,CAAsB,CAAC,CAAC;IACrD,CAAC;IAEL,iBAAC;AAAD,CAAC;AAZY,gCAAU;;;;;;;;ACAvB;IAAA;IAeA,CAAC;IAbG;;;;OAIG;IACH,iBAAG,GAAH;QACI,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC;SACxB;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,UAAC;AAAD,CAAC;AAfY,kBAAG;;;;;;;;ACAhB;IAAA;IAgBA,CAAC;IAdG;;;;;OAKG;IACH,qBAAK,GAAL,UAA4B,QAA8B;QACtD,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,YAAC;AAAD,CAAC;AAhBY,sBAAK;;;;;;;;ACAlB;IAAA;IAeA,CAAC;IAbG;;;;;;OAMG;IACH,mBAAI,GAAJ,UAA2B,CAAS;QAChC,OAAO,IAAI,CAAC,SAAS,EAAE;aAClB,SAAS,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,GAAG,CAAC,EAAZ,CAAY,CAAC;aAC7B,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;IAC7B,CAAC;IAEL,WAAC;AAAD,CAAC;AAfY,oBAAI;;;;;;;;ACFjB,wCAAoD;AAEpD;IACI,2BAA6B,QAAqB,EACrB,SAA+B;QAD/B,aAAQ,GAAR,QAAQ,CAAa;QACrB,cAAS,GAAT,SAAS,CAAsB;IAC5D,CAAC;IAED,gCAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,MAAM,EAAE;gBACR,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;aAC3C;SACJ;QACD,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;IACjD,CAAC;IACL,wBAAC;AAAD,CAAC;AAED;IAAA;IAYA,CAAC;IAVG;;;;;OAKG;IACH,6BAAS,GAAT,UAAgC,SAA+B;QAC3D,OAAO,yBAAc,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEL,gBAAC;AAAD,CAAC;AAZY,8BAAS;;;;;;;;ACjBtB;IAAA;IA4BA,CAAC;IA1BG;;;;;;OAMG;IACH,yBAAO,GAAP,UAA8B,KAAgB;QAC1C,IAAM,MAAM,GAAa,KAAK,IAAI,EAAE,CAAC;QACrC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,wBAAM,GAAN,UAA6B,KAAgB;QACzC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEL,cAAC;AAAD,CAAC;AA5BY,0BAAO;;;;;;;;ACApB;IAAA;IAoBA,CAAC;IAlBG;;;;;;OAMG;IACH,qBAAK,GAAL,UAAoC,GAAe;QAC/C,IAAM,MAAM,GAAG,GAAG,IAAI,IAAI,GAAG,EAAQ,CAAC;QACtC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,YAAC;AAAD,CAAC;AApBY,sBAAK;;;;;;;;ACAlB;IAAA;IAiBA,CAAC;IAfG;;;;;;OAMG;IACH,qBAAK,GAAL,UAA4B,GAAY;QACpC,IAAM,MAAM,GAAG,GAAG,IAAI,IAAI,GAAG,EAAE,CAAC;QAChC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YAC3E,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEL,YAAC;AAAD,CAAC;AAjBY,sBAAK;;;;;;;;ACAlB;IAAA;IAmBA,CAAC;IAjBG;;;;;OAKG;IACH,qBAAK,GAAL;QACI,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;YACrE,mBAA4B,EAA3B,aAAK,EAAE,cAAM,CAAe;YACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvB;QACD,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEL,YAAC;AAAD,CAAC;AAnBY,sBAAK;;;;;;;;ACFlB,wCAAoD;AAGpD;IAGI,uBAA6B,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;QAF1C,UAAK,GAAG,CAAC,CAAC,CAAC;IAGnB,CAAC;IAED,4BAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;SAChD;QACD,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,OAAO;YACH,IAAI,EAAE,KAAK;YACX,KAAK,EAAE;gBACH,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB;SACJ,CAAC;IACN,CAAC;IACL,oBAAC;AAAD,CAAC;AAED;IAAA;IAWA,CAAC;IATG;;;;OAIG;IACH,6BAAS,GAAT;QACI,OAAO,yBAAc,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEL,gBAAC;AAAD,CAAC;AAXY,8BAAS;;;;;;;;ACzBtB,wCAAoD;AAEpD;IACI,qBAA6B,SAAsB,EACtB,SAAsB;QADtB,cAAS,GAAT,SAAS,CAAa;QACtB,cAAS,GAAT,SAAS,CAAa;IACnD,CAAC;IAED,0BAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACpC,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACpC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE;YAC1B,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;SAChD;aAAM;YACH,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EAAC,CAAC;SAC3D;IACL,CAAC;IAEL,kBAAC;AAAD,CAAC;AAED;IAAA;IAcA,CAAC;IAZG;;;;;;;OAOG;IACH,iBAAG,GAAH,UAA6B,KAAkB;QAC3C,OAAO,yBAAc,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1E,CAAC;IAEL,UAAC;AAAD,CAAC;AAdY,kBAAG;;;;;;;;ACnBhB;IACI,2BAA6B,YAAwC;QAAxC,iBAAY,GAAZ,YAAY,CAA4B;IACrE,CAAC;IAED,gCAAI,GAAJ,UAAK,KAAW;QACZ,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACrC,OAAO;YACH,IAAI,EAAE,QAAQ,IAAI,IAAI;YACtB,KAAK,EAAE,QAAS;SACnB,CAAC;IACN,CAAC;IACL,wBAAC;AAAD,CAAC;;;;;;;;;ACXD;IAGI,+BAA6B,IAAO,EACP,YAAgD;QADhD,SAAI,GAAJ,IAAI,CAAG;QACP,iBAAY,GAAZ,YAAY,CAAoC;IAC7E,CAAC;IAED,oCAAI,GAAJ,UAAK,KAAW;QACZ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;SAC1C;QACD,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,QAAQ,IAAI,IAAI,EAAE;YAClB,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAgB,EAAC,CAAC;SAChD;QACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO;YACH,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,QAAS;SACnB,CAAC;IACN,CAAC;IACL,4BAAC;AAAD,CAAC","file":"sequency.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Sequency\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Sequency\"] = factory();\n\telse\n\t\troot[\"Sequency\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {All} from \"./all\";\nimport {Any} from \"./any\";\nimport {AsIterable} from \"./asIterable\";\nimport {Associate} from \"./associate\";\nimport {AssociateBy} from \"./associateBy\";\nimport {Average} from \"./average\";\nimport {Chunk} from \"./chunk\";\nimport {Contains} from \"./contains\";\nimport {Count} from \"./count\";\nimport {Distinct} from \"./distinct\";\nimport {DistinctBy} from \"./distinctBy\";\nimport {Drop} from \"./drop\";\nimport {DropWhile} from \"./dropWhile\";\nimport {ElementAt} from \"./elementAt\";\nimport {ElementAtOrElse} from \"./elementAtOrElse\";\nimport {ElementAtOrNull} from \"./elementAtOrNull\";\nimport {Filter} from \"./filter\";\nimport {FilterIndexed} from \"./filterIndexed\";\nimport {FilterNot} from \"./filterNot\";\nimport {FilterNotNull} from \"./filterNotNull\";\nimport {First} from \"./first\";\nimport {FirstOrNull} from \"./firstOrNull\";\nimport {FlatMap} from \"./flatMap\";\nimport {Flatten} from \"./flatten\";\nimport {Fold} from \"./fold\";\nimport {FoldIndexed} from \"./foldIndexed\";\nimport {ForEach} from \"./forEach\";\nimport {ForEachIndexed} from \"./forEachIndexed\";\nimport {GroupBy} from \"./groupBy\";\nimport {IndexOf} from \"./indexOf\";\nimport {IndexOfFirst} from \"./indexOfFirst\";\nimport {IndexOfLast} from \"./indexOfLast\";\nimport {JoinToString} from \"./joinToString\";\nimport {Last} from \"./last\";\nimport {LastOrNull} from \"./lastOrNull\";\nimport {Map} from \"./map\";\nimport {MapIndexed} from \"./mapIndexed\";\nimport {MapNotNull} from \"./mapNotNull\";\nimport {Max} from \"./max\";\nimport {MaxBy} from \"./maxBy\";\nimport {MaxWith} from \"./maxWith\";\nimport {Merge} from \"./merge\";\nimport {Min} from \"./min\";\nimport {MinBy} from \"./minBy\";\nimport {Minus} from \"./minus\";\nimport {MinWith} from \"./minWith\";\nimport {None} from \"./none\";\nimport {OnEach} from \"./onEach\";\nimport {Partition} from \"./partition\";\nimport {Plus} from \"./plus\";\nimport {Reduce} from \"./reduce\";\nimport {ReduceIndexed} from \"./reduceIndexed\";\nimport {Reverse} from \"./reverse\";\nimport {Single} from \"./single\";\nimport {SingleOrNull} from \"./singleOrNull\";\nimport {Sorted} from \"./sorted\";\nimport {SortedBy} from \"./sortedBy\";\nimport {SortedByDescending} from \"./sortedByDescending\";\nimport {SortedDescending} from \"./sortedDescending\";\nimport {SortedWith} from \"./sortedWith\";\nimport {Sum} from \"./sum\";\nimport {SumBy} from \"./sumBy\";\nimport {Take} from \"./take\";\nimport {TakeWhile} from \"./takeWhile\";\nimport {ToArray} from \"./toArray\";\nimport {ToMap} from \"./toMap\";\nimport {ToSet} from \"./toSet\";\nimport {Unzip} from \"./unzip\";\nimport {WithIndex} from \"./withIndex\";\nimport {Zip} from \"./zip\";\nimport GeneratorIterator from \"./GeneratorIterator\";\nimport GeneratorSeedIterator from \"./GeneratorSeedIterator\";\n\n/**\n * @hidden\n */\nexport interface SequenceOperators<T> extends All, Any, AsIterable, Associate, AssociateBy<T>, Average, Chunk, Contains, Count, Distinct, DistinctBy, Drop,\n    DropWhile, ElementAt, ElementAtOrElse, ElementAtOrNull, Filter, FilterIndexed, FilterNot, FilterNotNull, First, FirstOrNull, FlatMap, Flatten, Fold, FoldIndexed,\n    ForEach, ForEachIndexed, GroupBy, IndexOf, IndexOfFirst, IndexOfLast, JoinToString, Last, LastOrNull, Map, MapIndexed, MapNotNull, Max, MaxBy, MaxWith, Merge, Min, MinBy,\n    Minus, MinWith, None, OnEach, Partition, Plus, Reduce, ReduceIndexed, Reverse, Single, SingleOrNull, Sorted, SortedBy, SortedByDescending, SortedDescending, SortedWith,\n    Sum, SumBy, Take, TakeWhile, ToArray, ToMap, ToSet, Unzip, WithIndex, Zip {\n}\n\n/**\n * A Sequence provides a fluent functional API consisting\n * of various intermediate and terminal operations for processing the iterated data.\n * The operations are evaluated lazily to avoid examining all of the input data\n * when it's not necessary. Sequences can be iterated only once.\n */\nexport default interface Sequence<T> extends SequenceOperators<T> {\n    readonly iterator: Iterator<T>;\n}\n\nclass SequenceImpl<T> {\n    constructor(readonly iterator: Iterator<T>) {\n    }\n}\n\napplyMixins(SequenceImpl, [All, Any, AsIterable, Associate, AssociateBy, Average, Chunk, Contains, Count, Distinct, DistinctBy, Drop,\n    DropWhile, ElementAt, ElementAtOrElse, ElementAtOrNull, Filter, FilterIndexed, FilterNot, FilterNotNull, First, FirstOrNull, FlatMap, Flatten, Fold, FoldIndexed,\n    ForEach, ForEachIndexed, GroupBy, IndexOf, IndexOfFirst, IndexOfLast, JoinToString, Last, LastOrNull, Map, MapIndexed, MapNotNull, Max, MaxBy, MaxWith, Merge, Min, MinBy,\n    Minus, MinWith, None, OnEach, Partition, Plus, Reduce, ReduceIndexed, Reverse, Single, SingleOrNull, Sorted, SortedBy, SortedByDescending, SortedDescending, SortedWith,\n    Sum, SumBy, Take, TakeWhile, ToArray, ToMap, ToSet, Unzip, WithIndex, Zip]);\n\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\nexport function sequenceOf<T>(...args: Array<T>): Sequence<T> {\n    return asSequence(args);\n}\n\nexport function emptySequence<T>(): Sequence<T> {\n    return asSequence([]);\n}\n\nexport function asSequence<T>(iterable: Iterable<T>): Sequence<T> {\n    if (iterable === null) {\n        throw new Error(\"Cannot create sequence for input: null\");\n    }\n    if (iterable === undefined) {\n        throw new Error(\"Cannot create sequence for input: undefined\");\n    }\n    if (iterable[Symbol.iterator] == null) {\n        throw new Error(\"Cannot create sequence for non-iterable input: \" + iterable);\n    }\n    const iterator = iterable[Symbol.iterator]();\n    return createSequence<T>(iterator);\n}\n\nexport function createSequence<T>(iterator: Iterator<T>): Sequence<T> {\n    return new SequenceImpl(iterator) as any;\n}\n\nexport function isSequence<T>(object: any): object is Sequence<T> {\n    return object instanceof SequenceImpl;\n}\n\nexport function extendSequence(mixin: { new(): any }) {\n    applyMixins(SequenceImpl, [mixin]);\n}\n\nexport function generateSequence<T>(nextFunction: () => T | null | undefined): Sequence<T>;\nexport function generateSequence<T>(seedFunction: () => T | null | undefined, nextFunction: (item: T) => T | null | undefined): Sequence<T>;\nexport function generateSequence<T>(seed: T | null | undefined, nextFunction: (item: T) => T | null | undefined): Sequence<T>;\nexport function generateSequence<T>(a: any, b?: any): Sequence<T> {\n    if (typeof a === \"function\" && b == null) {\n        return createSequence<T>(new GeneratorIterator(a));\n    }\n    const seed = typeof a === \"function\" ? a() : a;\n    return seed != null\n        ? createSequence<T>(new GeneratorSeedIterator(seed, b))\n        : emptySequence<T>();\n}\n\nexport function range(start: number, endInclusive: number, step: number = 1): Sequence<number> {\n    if (start > endInclusive) {\n        throw new Error(`start [${start}] must be lower then endInclusive [${endInclusive}]`);\n    }\n    if (start === endInclusive) {\n        return emptySequence();\n    }\n    let current = start;\n    return generateSequence(() => {\n        try {\n            return current <= endInclusive\n                ? current\n                : undefined;\n        } finally {\n            current += step;\n        }\n    });\n}","import Sequence from \"./Sequence\";\n\nexport class All {\n\n    /**\n     * Returns `true` if all elements match the given `predicate`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {boolean}\n     */\n    all<T>(this: Sequence<T>, predicate: (item: T) => boolean): boolean {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (!predicate(item.value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Any {\n\n    /**\n     * Returns `true` if at least one element match the given `predicate`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {boolean}\n     */\n    any<T>(this: Sequence<T>, predicate?: (item: T) => boolean): boolean {\n        if (predicate == null) {\n            return !this.iterator.next().done;\n        }\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (predicate(item.value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class AsIterable {\n\n    /**\n     * Returns an iterable representation of the sequence.\n     *\n     * @returns {Iterable<T>}\n     */\n    asIterable<T>(this: Sequence<T>): Iterable<T> {\n        const iterator = this.iterator;\n        return {\n            [Symbol.iterator](): Iterator<T> {\n                return iterator;\n            }\n        };\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Associate {\n\n    /**\n     * Transforms each element into a key-value pair and returns the results as map. In case of\n     * duplicate keys the last key-value pair overrides the other.\n     *\n     * @param {(value: T) => [K , V]} transform\n     * @returns {Map<K, V>}\n     */\n    associate<T, K, V>(this: Sequence<T>, transform: (value: T) => [K, V]): Map<K, V> {\n        const result = new Map<K, V>();\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const pair = transform(item.value);\n            result.set(pair[0], pair[1]);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class AssociateBy<T> {\n\n    /**\n     * Returns a map consisting of the elements mapped by the given `keySelector`.\n     *\n     * @param {(value: T) => K} keySelector\n     * @returns {Map<K, T>}\n     */\n    associateBy<K>(keySelector: (value: T) => K): Map<K, T>;\n\n    /**\n     * Returns a map consisting of the elements indexed by the given `key`.\n     *\n     * @param {K} key\n     * @returns {Map<T[K], T>}\n     */\n    associateBy<K extends keyof T>(key: K): Map<T[K], T>;\n\n    /**\n     * Returns a map consisting of the elements mapped by the given `keySelector`. The value\n     * is transformed into another value by the `valueTransformer`.\n     *\n     * @param {(value: T) => K} keySelector\n     * @param {(value: T) => V} valueTransformer\n     * @returns {Map<K, V>}\n     */\n    associateBy<K, V>(keySelector: (value: T) => K, valueTransformer: (value: T) => V): Map<K, V>;\n\n    /**\n     * Returns a map consisting of the elements indexed by the given `key`. The value\n     * is transformed into another value by the `valueTransformer`.\n     *\n     * @param {K} key\n     * @param {(value: T) => V} valueTransformer\n     * @returns {Map<K, V>}\n     */\n    associateBy<K extends keyof T, V>(key: K, valueTransformer: (value: T) => V): Map<T[K], V>;\n\n    associateBy<T, K, V>(this: Sequence<T>,\n                         keyOrSelector: any,\n                         valueTransform?: (value: T) => V): Map<K, V | T> {\n        const selector = typeof keyOrSelector === \"function\"\n            ? keyOrSelector\n            : (value: T) => value[keyOrSelector as keyof T];\n        const result = new Map<K, V | T>();\n        const transform = valueTransform != null\n            ? valueTransform\n            : (value: T) => value;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const key = selector(item.value);\n            const value = transform(item.value);\n            result.set(key, value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Average {\n\n    /**\n     * Returns the average of all numbers of the sequence or `NaN` if the sequence is empty.\n     *\n     * @returns {number}\n     */\n    average(this: Sequence<number>): number {\n        let sum = 0;\n        let count = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            sum += item.value;\n            count++;\n        }\n        return count === 0\n            ? Number.NaN\n            : sum / count;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Chunk {\n\n    /**\n     * Splits the elements of the sequence into arrays which length is determined by\n     * the given `chunkSize` and returns all chunks as array.\n     *\n     * @param {number} chunkSize\n     * @returns {Array<Array<T>>}\n     */\n    chunk<T>(this: Sequence<T>, chunkSize: number): Array<Array<T>> {\n        if (chunkSize < 1) {\n            throw new Error(\"chunkSize must be > 0 but is \" + chunkSize);\n        }\n        const result: Array<Array<T>> = [];\n        let index = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const chunkIndex = Math.floor(index / chunkSize);\n            if (result[chunkIndex] == null) {\n                result[chunkIndex] = [item.value];\n            } else {\n                result[chunkIndex].push(item.value);\n            }\n            index++;\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Contains {\n\n    /**\n     * Returns `true` if the sequence contains the given `element`.\n     *\n     * @param {T} element\n     * @returns {boolean}\n     */\n    contains<T>(this: Sequence<T>, element: T): boolean {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (element === item.value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Count {\n\n    /**\n     * Returns the number of elements of this sequence. If `predicate` is present, returns\n     * the number of elements matching the given `predicate`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {number}\n     */\n    count<T>(this: Sequence<T>, predicate?: (item: T) => boolean): number {\n        let num = 0;\n        if (predicate == null) {\n            for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n                num++;\n            }\n        } else {\n            for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n                if (predicate(item.value)) {\n                    num++;\n                }\n            }\n        }\n        return num;\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass DistinctIterator<T> implements Iterator<T> {\n    private items: Array<T> = [];\n\n    constructor(private readonly iterator: Iterator<T>) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (this.items.indexOf(item.value) < 0) {\n                this.items.push(item.value);\n                return {done: false, value: item.value};\n            }\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class Distinct {\n\n    /**\n     * Returns a new sequence which discards all duplicate elements.\n     *\n     * @returns {Sequence<T>}\n     */\n    distinct<T>(this: Sequence<T>): Sequence<T> {\n        return createSequence(new DistinctIterator(this.iterator));\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass DistinctByIterator<T, K> implements Iterator<T> {\n    private keys: Array<K> = [];\n\n    constructor(private readonly iterator: Iterator<T>,\n                private readonly selector: (item: T) => K) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const key = this.selector(item.value);\n            if (this.keys.indexOf(key) < 0) {\n                this.keys.push(key);\n                return {done: false, value: item.value};\n            }\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class DistinctBy {\n\n    /**\n     * Returns a new sequence which discards all elements with duplicate items determined\n     * by the given `selector`.\n     *\n     * @param {(item: T) => K} selector\n     * @returns {Sequence<T>}\n     */\n    distinctBy<T, K>(this: Sequence<T>, selector: (item: T) => K): Sequence<T> {\n        return createSequence(new DistinctByIterator(this.iterator, selector));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Drop {\n\n    /**\n     * Returns a new sequence which discards the first `n` elements;\n     *\n     * @param {number} n\n     * @returns {Sequence<T>}\n     */\n    drop<T>(this: Sequence<T>, n: number): Sequence<T> {\n        return this.withIndex()\n            .dropWhile(it => it.index < n)\n            .map(it => it.value);\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass DropWhileIterator<T> implements Iterator<T> {\n    private dropping = true;\n\n    constructor(private readonly iterator: Iterator<T>,\n                private readonly predicate: (item: T) => boolean) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (!this.dropping) {\n                return {done: false, value: item.value};\n            }\n            const result = this.predicate(item.value);\n            if (!result) {\n                this.dropping = false;\n                return {done: false, value: item.value};\n            }\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class DropWhile {\n\n    /**\n     * Drops all elements of the sequence as long as the given `predicate` evaluates to true.\n     *\n     * @param {(item: T) => boolean} predicate\n     * @returns {Sequence<T>}\n     */\n    dropWhile<T>(this: Sequence<T>, predicate: (item: T) => boolean): Sequence<T> {\n        return createSequence(new DropWhileIterator(this.iterator, predicate));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ElementAt {\n\n    /**\n     * Returns the element at position `index` (zero-based) or throws an error if `index`\n     * is out of bounds.\n     *\n     * @param {number} index\n     * @returns {T}\n     */\n    elementAt<T>(this: Sequence<T>, index: number): T {\n        let i = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (i === index) {\n                return item.value;\n            }\n            i++;\n        }\n        throw new Error(\"Index out of bounds: \" + index);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ElementAtOrElse {\n\n    /**\n     * Returns the element at position `index` (zero-based). If `index` is out of bounds returns\n     * the result of the given `defaultValue` function.\n     *\n     * @param {number} index\n     * @param defaultValue\n     * @returns {T}\n     */\n    elementAtOrElse<T>(this: Sequence<T>, index: number, defaultValue: (index: number) => T): T {\n        let i = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (i === index) {\n                return item.value;\n            }\n            i++;\n        }\n        return defaultValue(index);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ElementAtOrNull {\n\n    /**\n     * Returns the element at position `index` (zero-based) or `null` if `index`\n     * is out of bounds.\n     *\n     * @param {number} index\n     * @returns {T}\n     */\n    elementAtOrNull<T>(this: Sequence<T>, index: number): T | null {\n        let i = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (i === index) {\n                return item.value;\n            }\n            i++;\n        }\n        return null;\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass FilterIterator<T> implements Iterator<T> {\n    constructor(private readonly predicate: (item: T) => boolean,\n                private readonly iterator: Iterator<T>) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (this.predicate(item.value)) {\n                return {done: false, value: item.value};\n            }\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class Filter {\n\n    /**\n     * Returns a new sequence consisting of all elements that match the given `predicate`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {Sequence<T>}\n     */\n    filter<T>(this: Sequence<T>, predicate: (item: T) => boolean): Sequence<T> {\n        return createSequence(new FilterIterator(predicate, this.iterator));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class FilterIndexed {\n\n    /**\n     * Returns a new sequence consisting of all elements that match the given `predicate`.\n     *\n     * @param {(index: number, value: T) => boolean} predicate\n     * @returns {Sequence<T>}\n     */\n    filterIndexed<T>(this: Sequence<T>, predicate: (index: number, value: T) => boolean): Sequence<T> {\n        return this.withIndex()\n            .filter(it => predicate(it.index, it.value))\n            .map(it => it.value);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class FilterNot {\n\n    /**\n     * Returns a new sequence consisting of all elements that don't match the given `predicate`.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {Sequence<T>}\n     */\n    filterNot<T>(this: Sequence<T>, predicate: (value: T) => boolean): Sequence<T> {\n        return this.filter((value: T) => !predicate(value));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class FilterNotNull {\n\n    /**\n     * Returns a new sequence consisting of all non-null elements.\n     *\n     * @returns {Sequence<T>}\n     */\n    filterNotNull<T>(this: Sequence<T | null>): Sequence<T> {\n        return this.filter(it => it !== null) as Sequence<T>;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class First {\n\n    /**\n     * Returns the first element of the sequence or the first element matching `predicate` if present, otherwise throws\n     * an error.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {T}\n     */\n    first<T>(this: Sequence<T>, predicate?: (item: T) => boolean): T {\n        if (predicate != null) {\n            return this.filter(predicate).first();\n        }\n        const item = this.iterator.next();\n        if (item.done) {\n            throw new Error(\"No such element\");\n        }\n        return item.value;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class FirstOrNull {\n\n    /**\n     * Returns the first element of the sequence or the first element matching `predicate` if present, otherwise returns `null`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {T}\n     */\n    firstOrNull<T>(this: Sequence<T>, predicate?: (item: T) => boolean): T | null {\n        if (predicate != null) {\n            return this.filter(predicate).firstOrNull();\n        }\n        const item = this.iterator.next();\n        return item.done\n            ? null\n            : item.value;\n    }\n\n    /**\n     * Returns the first element of the sequence or the first element matching `predicate` if present, otherwise returns `null`.\n     *\n     * @param {(T) => boolean} predicate\n     * @returns {T}\n     */\n    find<T>(this: Sequence<T>, predicate?: (item: T) => boolean): T | null {\n        return this.firstOrNull(predicate);\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass FlatMapIterator<S, T> implements Iterator<T> {\n    private current: Iterator<T> | undefined;\n\n    constructor(private readonly transform: (item: S) => Sequence<T>,\n                private readonly iterator: Iterator<S>) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        if (this.current != null) {\n            const item = this.current.next();\n            if (!item.done) {\n                return item;\n            }\n        }\n        const next = this.iterator.next();\n        if (!next.done) {\n            const sequence = this.transform(next.value);\n            this.current = sequence.iterator;\n            return this.next();\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class FlatMap {\n\n    /**\n     * Transforms each element into a sequence of items and returns a flat single sequence of all those items.\n     *\n     * @param {(value: S) => Sequence<T>} transform\n     * @returns {Sequence<T>}\n     */\n    flatMap<S, T>(this: Sequence<S>, transform: (value: S) => Sequence<T>): Sequence<T> {\n        return createSequence(new FlatMapIterator(transform, this.iterator));\n    }\n\n}","import Sequence, {asSequence, isSequence} from \"./Sequence\";\n\nexport class Flatten {\n\n    /**\n     * Returns a single flat sequence of all the items from all sequences or iterables.\n     *\n     * @returns {Sequence<T>}\n     */\n    flatten<T>(this: Sequence<Sequence<T> | Iterable<T>>): Sequence<T> {\n        return this.flatMap(it => {\n            if (isSequence(it)) {\n                return it;\n            } else {\n                return asSequence(it);\n            }\n        });\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Fold {\n\n    /**\n     * Accumulates all elements of the sequence into a single result by applying the given `operation` starting with\n     * the `initial` value. The result of the last operation will be passed as accumulated value to the getNext invocation\n     * of the operation until all elements of the sequence are processed.\n     *\n     * @param {R} initial\n     * @param {(acc: R, element: T) => R} operation\n     * @returns {R}\n     */\n    fold<T, R>(this: Sequence<T>, initial: R, operation: (acc: R, element: T) => R): R {\n        let result = initial;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = operation(result, item.value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class FoldIndexed {\n\n    /**\n     * Accumulates all elements of the sequence into a single result by applying the given `operation` starting with\n     * the `initial` value. The result of the last operation will be passed as accumulated value to the getNext invocation\n     * of the operation as well as the `index` of the current element (zero-based) until all elements of the sequence\n     * are processed.\n     *\n     * @param {R} initial\n     * @param {(index: number, acc: R, element: T) => R} operation\n     * @returns {R}\n     */\n    foldIndexed<T, R>(this: Sequence<T>, initial: R, operation: (index: number, acc: R, element: T) => R): R {\n        let result = initial;\n        let index = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = operation(index, result, item.value);\n            index++;\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ForEach {\n\n    /**\n     * Performs the given `action` (side-effect) for each element of the sequence.\n     *\n     * @param {(T) => void} action\n     */\n    forEach<T>(this: Sequence<T>, action: (item: T) => void) {\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            action(item.value);\n        }\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ForEachIndexed {\n\n    /**\n     * Performs the given `action` (side-effect) for each element of the sequence and passes the `index` of the current\n     * element (zero-based).\n     *\n     * @param {(index: number, value: T) => void} action\n     */\n    forEachIndexed<T>(this: Sequence<T>, action: (index: number, value: T) => void) {\n        this.withIndex()\n            .forEach(it => action(it.index, it.value));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class GroupBy {\n\n    /**\n     * Groups all elements of the sequence into a map. Keys are determined by the given `keySelector` function.\n     *\n     * @param {(value: T) => K} keySelector\n     * @returns {Map<K, Array<T>>}\n     */\n    groupBy<T, K>(this: Sequence<T>, keySelector: (value: T) => K): Map<K, Array<T>> {\n        const result = new Map<K, Array<T>>();\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const key = keySelector(item.value);\n            const array = result.get(key);\n            if (array == null) {\n                result.set(key, [item.value]);\n            } else {\n                array.push(item.value);\n            }\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class IndexOf {\n\n    /**\n     * Returns the zero-based index of the given `element` or -1 if the sequence does not contain the element.\n     *\n     * @param {T} element\n     * @returns {number}\n     */\n    indexOf<T>(this: Sequence<T>, element: T): number {\n        let index = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (element === item.value) {\n                return index;\n            }\n            index++;\n        }\n        return -1;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class IndexOfFirst {\n\n    /**\n     * Returns the zero-based index of the first element matching the given `predicate` or -1 if no element matches\n     * the predicate.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {number}\n     */\n    indexOfFirst<T>(this: Sequence<T>, predicate: (value: T) => boolean): number {\n        let index = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (predicate(item.value)) {\n                return index;\n            }\n            index++;\n        }\n        return -1;\n    }\n\n}\n","import Sequence from \"./Sequence\";\n\nexport class IndexOfLast {\n\n    /**\n     * Returns the zero-based index of the last element matching the given `predicate` or -1 if no element matches\n     * the predicate.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {number}\n     */\n    indexOfLast<T>(this: Sequence<T>, predicate: (value: T) => boolean): number {\n        let index = 0;\n        let result = -1;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (predicate(item.value)) {\n                result = index;\n            }\n            index++;\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport interface JoinConfig<T> {\n    value?: string;\n    separator?: string;\n    prefix?: string;\n    postfix?: string;\n    limit?: number;\n    truncated?: string;\n    transform?: (value: T) => string;\n}\n\nconst defaults = {\n    value: \"\",\n    separator: \", \",\n    prefix: \"\",\n    postfix: \"\",\n    limit: -1,\n    truncated: \"...\",\n    transform: undefined\n};\n\nexport class JoinToString {\n\n    /**\n     * Joins all elements of the sequence into a string with the given configuration.\n     *\n     * @param {JoinConfig<T>} config\n     * @returns {string}\n     */\n    joinToString<T>(this: Sequence<T>, config: JoinConfig<T> = defaults): string {\n        const {\n            value = defaults.value,\n            separator = defaults.separator,\n            prefix = defaults.prefix,\n            postfix = defaults.postfix,\n            limit = defaults.limit,\n            truncated = defaults.truncated,\n            transform = defaults.transform\n        } = config;\n\n        let result = `${value}${prefix}`;\n        let count = 0;\n\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            count++;\n            if (count > 1) {\n                result += separator;\n            }\n            if (limit < 0 || count <= limit) {\n                result += transform != null\n                    ? transform(item.value)\n                    : String(item.value);\n            } else {\n                break;\n            }\n        }\n\n        if (limit >= 0 && count > limit) {\n            result += truncated;\n        }\n\n        result += postfix;\n        return result;\n    }\n\n    /**\n     * Joins all elements of the sequence into a string with the given configuration.\n     *\n     * @param {JoinConfig<T>} config\n     * @returns {string}\n     */\n    joinTo<T>(this: Sequence<T>, config: JoinConfig<T> = defaults): string {\n        return this.joinToString(config);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Last {\n\n    /**\n     * Returns the last element of the sequence or the last element matching `predicate` if present, otherwise throws\n     * an error.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {T}\n     */\n    last<T>(this: Sequence<T>, predicate?: (value: T) => boolean): T {\n        if (predicate != null) {\n            return this.filter(predicate).last();\n        }\n        let result: T;\n        let empty = true;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = item.value;\n            empty = false;\n        }\n        if (empty) {\n            throw new Error(\"No such element\");\n        }\n        return result!;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class LastOrNull {\n\n    /**\n     * Returns the last element of the sequence or the last element matching `predicate` if present, otherwise returns `null`.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {T}\n     */\n    lastOrNull<T>(this: Sequence<T>, predicate?: (value: T) => boolean): T | null {\n        if (predicate != null) {\n            return this.filter(predicate).lastOrNull();\n        }\n        let result: T | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = item.value;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the last element of the sequence or the last element matching `predicate` if present, otherwise returns `null`.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {T}\n     */\n    findLast<T>(this: Sequence<T>, predicate?: (value: T) => boolean): T | null {\n        return this.lastOrNull(predicate);\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass MapIterator<S, T> implements Iterator<T> {\n    constructor(private readonly transform: (item: S) => T,\n                private readonly iterator: Iterator<S>) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        const item = this.iterator.next();\n        return item.done\n            ? {done: true, value: undefined as any}\n            : {done: false, value: this.transform(item.value)};\n    }\n}\n\nexport class Map {\n\n    /**\n     * Transforms each element into another value by applying the given `transform` function and returns a new sequence.\n     *\n     * @param {(T) => S} transform\n     * @returns {Sequence<S>}\n     */\n    map<S, T>(this: Sequence<T>, transform: (element: T) => S): Sequence<S> {\n        return createSequence(new MapIterator(transform, this.iterator));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class MapIndexed {\n\n    /**\n     * Transforms each element into another value by applying the given `transform` function and returns a new sequence.\n     *\n     * @param {(index: number, value: T) => R} transform\n     * @returns {Sequence<R>}\n     */\n    mapIndexed<T, R>(this: Sequence<T>, transform: (index: number, value: T) => R): Sequence<R> {\n        return this.withIndex()\n            .map(it => transform(it.index, it.value));\n    }\n\n}","import Sequence, {emptySequence, sequenceOf} from \"./Sequence\";\n\nexport class MapNotNull {\n\n    /**\n     * Transforms each element into another value by applying the given `transform` function and returns a new sequence.\n     * Transformations into `null` values are discarded.\n     *\n     * @param {(value: T) => R} transform\n     * @returns {Sequence<R>}\n     */\n    mapNotNull<T, R>(this: Sequence<T>, transform: (value: T) => R | null): Sequence<R> {\n        return this.flatMap((value: T) => {\n            const item = transform(value);\n            return item !== null\n                ? sequenceOf(item)\n                : emptySequence();\n        });\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Max {\n\n    /**\n     * Returns the maximum element of the sequence or `null` if sequence is empty.\n     *\n     * @returns {T}\n     */\n    max<T>(this: Sequence<T>): T | null {\n        let result: T | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (result == null || item.value > result) {\n                result = item.value;\n            }\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class MaxBy {\n\n    /**\n     * Returns the maximum element by comparing the results of the given `selector` function\n     * for each element of the sequence or `null` if the sequence is empty.\n     *\n     * @param {(value: T) => R} selector\n     * @returns {T}\n     */\n    maxBy<T, R>(this: Sequence<T>, selector: (value: T) => R): T | null {\n        let max: T | null = null;\n        let maxSelected: R | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const value = selector(item.value);\n            if (maxSelected == null || value > maxSelected) {\n                maxSelected = value;\n                max = item.value;\n            }\n        }\n        return max;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class MaxWith {\n\n    /**\n     * Returns the maximum element of the sequence by evaluating the given `compare`\n     * function or `null` if sequence is empty.\n     *\n     * @returns {T}\n     */\n    maxWith<T>(this: Sequence<T>, compare: (a: T, b: T) => number): T | null {\n        let max: T | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (max == null || compare(item.value, max) > 0) {\n                max = item.value;\n            }\n        }\n        return max;\n    }\n\n}","import Sequence, {asSequence, isSequence} from \"./Sequence\";\n\nexport class Merge {\n\n    /**\n     * Merges the elements of both sequences into a new sequence. Each element of this sequence is eventually replaced with\n     * an element of the other sequence by comparing results of the given `selector` function. If no value is found in the other\n     * sequence the element is retained. New elements of the other sequence are appended to the end of the new sequence or\n     * prepended to the start of the new sequence, if `prependNewValues` is set to `true`. This operation is not lazy evaluated.\n     *\n     * @param {Sequence<T>} other\n     * @param {(value: T) => S} selector\n     * @param prependNewValues\n     * @returns {Sequence<T>}\n     */\n    merge<T, S>(this: Sequence<T>, other: Sequence<T> | Iterable<T>, selector: (value: T) => S, prependNewValues: boolean = false): Sequence<T> {\n        let mergeValues = isSequence(other)\n            ? other.toArray()\n            : asSequence(other).toArray();\n        const leftValues = this.toArray();\n        const result = leftValues.map(left => {\n            const selected = selector(left);\n            const right = asSequence(mergeValues)\n                .find(it => selector(it) === selected);\n            if (right != null) {\n                mergeValues = mergeValues.filter(it => it !== right);\n                return right;\n            } else {\n                return left;\n            }\n        });\n        if (prependNewValues) {\n            return asSequence([...mergeValues, ...result]);\n        } else {\n            return asSequence([...result, ...mergeValues]);\n        }\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Min {\n\n    /**\n     * Returns the minimum element of the sequence or `null` if sequence is empty.\n     *\n     * @returns {T}\n     */\n    min<T>(this: Sequence<T>): T | null {\n        let result: T | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (result == null || item.value < result) {\n                result = item.value;\n            }\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class MinBy {\n\n    /**\n     * Returns the minimum element by comparing the results of the given `selector` function\n     * for each element of the sequence or `null` if the sequence is empty.\n     *\n     * @param {(value: T) => R} selector\n     * @returns {T}\n     */\n    minBy<T, R>(this: Sequence<T>, selector: (value: T) => R): T | null {\n        let min: T | null = null;\n        let minSelected: R | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const value = selector(item.value);\n            if (minSelected == null || value < minSelected) {\n                minSelected = value;\n                min = item.value;\n            }\n        }\n        return min;\n    }\n\n}","import Sequence, {isSequence} from \"./Sequence\";\n\nexport class Minus {\n\n    /**\n     * Removes the given `data` and returns a new sequence. Data can either be a single element, an array of elements\n     * or a sequence of elements.\n     *\n     * @param {Sequence<T> | Array<T> | T} data\n     * @returns {Sequence<T>}\n     */\n    minus<T>(this: Sequence<T>, data: T | Sequence<T> | Array<T>): Sequence<T> {\n        if (isSequence(data)) {\n            const array: Array<T> = data.toArray();\n            return this.filter(it => array.indexOf(it) < 0);\n        } else if (data instanceof Array) {\n            return this.filter(it => data.indexOf(it) < 0);\n        } else {\n            return this.filter(it => it !== data);\n        }\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class MinWith {\n\n    /**\n     * Returns the minimum element of the sequence by evaluating the given `compare`\n     * function or `null` if sequence is empty.\n     *\n     * @returns {T}\n     */\n    minWith<T>(this: Sequence<T>, compare: (a: T, b: T) => number): T | null {\n        let min: T | null = null;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (min == null || compare(item.value, min) < 0) {\n                min = item.value;\n            }\n        }\n        return min;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class None {\n\n    /**\n     * Returns `true` if no element match the given `predicate` or if the sequence is empty\n     * if no predicate is present.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {boolean}\n     */\n    none<T>(this: Sequence<T>, predicate?: (value: T) => boolean): boolean {\n        if (predicate == null) {\n            return this.iterator.next().done;\n        }\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (predicate(item.value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class OnEach {\n\n    /**\n     * Performs the given `action` for each element and returns the sequence.\n     *\n     * @param {(value: T) => void} action\n     * @returns {Sequence<T>}\n     */\n    onEach<T>(this: Sequence<T>, action: (value: T) => void): Sequence<T> {\n        return this.map(it => {\n            action(it);\n            return it;\n        });\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Partition {\n\n    /**\n     * Evaluates the given `predicate` for each element of the sequence and assorts each element into one of two lists\n     * according to the result of the predicate. Returns both lists as an object.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {{true: Array<T>; false: Array<T>}}\n     */\n    partition<T>(this: Sequence<T>, predicate: (value: T) => boolean): { \"true\": Array<T>, \"false\": Array<T> } {\n        const arrayTrue: Array<T> = [];\n        const arrayFalse: Array<T> = [];\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            if (predicate(item.value)) {\n                arrayTrue.push(item.value);\n            } else {\n                arrayFalse.push(item.value);\n            }\n        }\n        return { \"true\": arrayTrue, \"false\": arrayFalse };\n    }\n\n}","import Sequence, {createSequence, isSequence} from \"./Sequence\";\n\nclass AppendIterator<T> implements Iterator<T> {\n    constructor(private readonly first: Iterator<T>,\n                private readonly second: Iterator<T>) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        const item1 = this.first.next();\n        if (!item1.done) {\n            return {done: false, value: item1.value};\n        }\n        const item2 = this.second.next();\n        if (!item2.done) {\n            return {done: false, value: item2.value};\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class Plus {\n\n    /**\n     * Appends the given `element` to the end of the sequence and returns a new sequence.\n     *\n     * @param {T} element\n     * @returns {Sequence<T>}\n     */\n    plus<T>(this: Sequence<T>, element: T): Sequence<T>;\n\n    /**\n     * Appends the given array to the end of the sequence and returns a new sequence.\n     *\n     * @param {Array<T>} other\n     * @returns {Sequence<T>}\n     */\n    plus<T>(this: Sequence<T>, other: Array<T>): Sequence<T>;\n\n    /**\n     * Appends the given sequence to the end of the sequence and returns a new sequence.\n     *\n     * @param {Sequence<T>} other\n     * @returns {Sequence<T>}\n     */\n    plus<T>(this: Sequence<T>, other: Sequence<T>): Sequence<T>;\n\n    plus<T>(this: Sequence<T>, data: T | Sequence<T> | Array<T>): Sequence<T> {\n        if (isSequence(data)) {\n            return createSequence(new AppendIterator(this.iterator, data.iterator));\n        } else if (data instanceof Array) {\n            const iterator = data[Symbol.iterator]();\n            return createSequence(new AppendIterator(this.iterator, iterator));\n        } else {\n            const iterator = [data][Symbol.iterator]();\n            return createSequence(new AppendIterator(this.iterator, iterator));\n        }\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Reduce {\n\n    /**\n     * Reduces the whole sequence to a single value by invoking `operation` with each element\n     * from left to right. For every invocation of the operation `acc` is the result of the last\n     * invocation. For the first invocation of the operation `acc` is the first element of the\n     * sequence.\n     *\n     * @param {(acc: S, value: T) => S} operation\n     * @returns {S}\n     */\n    reduce<S, T extends S>(this: Sequence<T>, operation: (acc: S, value: T) => S): S {\n        const first = this.iterator.next();\n        if (first.done) {\n            throw new Error(\"Cannot reduce empty sequence\");\n        }\n        let result: S = first.value;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = operation(result, item.value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ReduceIndexed {\n\n    /**\n     * Reduces the whole sequence to a single value by invoking `operation` with each element\n     * from left to right. For every invocation of the operation `acc` is the result of the last\n     * invocation. For the first invocation of the operation `acc` is the first element of the\n     * sequence. In addition the `index` of the current element is also passed to the operation.\n     *\n     * @param {(index: number, acc: S, element: T) => S} operation\n     * @returns {S}\n     */\n    reduceIndexed<S, T extends S>(this: Sequence<T>, operation: (index: number, acc: S, element: T) => S): S {\n        const first = this.iterator.next();\n        if (first.done) {\n            throw new Error(\"Cannot reduce empty sequence\");\n        }\n        let index = 1;\n        let result: S = first.value;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result = operation(index, result, item.value);\n            index++;\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Reverse {\n\n    /**\n     * Returns a new sequence with all elements of the sequence in reverse order.\n     *\n     * @returns {Sequence<T>}\n     */\n    reverse<T>(this: Sequence<T>): Sequence<T> {\n        return this.withIndex()\n            .sortedByDescending(it => it.index)\n            .map(it => it.value);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Single {\n\n    /**\n     * Returns the single element of the sequence or throws error if the sequence has more than\n     * one element or none at all. If a `predicate` is passed returns the single element matching\n     * the predicate or throws an error if more or less than one element match the predicate.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {T}\n     */\n    single<T>(this: Sequence<T>, predicate?: (value: T) => boolean): T {\n        if (predicate != null) {\n            return this.filter(predicate).single();\n        }\n        const first = this.iterator.next();\n        if (first.done) {\n            throw new Error(\"No such element\");\n        }\n        if (!this.iterator.next().done) {\n            throw new Error(\"Expect single element\");\n        }\n        return first.value;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class SingleOrNull {\n\n    /**\n     * Returns the single element of the sequence or `null` if the sequence has more than\n     * one element or none at all. If a `predicate` is passed returns the single element matching\n     * the predicate or `null` if more or less than one element match the predicate.\n     *\n     * @param {(value: T) => boolean} predicate\n     * @returns {T}\n     */\n    singleOrNull<T>(this: Sequence<T>, predicate?: (value: T) => boolean): T | null {\n        if (predicate != null) {\n            return this.filter(predicate).singleOrNull();\n        }\n        const first = this.iterator.next();\n        if (first.done) {\n            return null;\n        }\n        if (!this.iterator.next().done) {\n            return null;\n        }\n        return first.value;\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\nimport ComparatorFactory from \"./ComparatorFactory\";\nimport Comparator from \"./Comparator\";\nimport createComparatorFactory from \"./createComparatorFactory\";\n\nexport class Sorted {\n\n    /**\n     * Returns a new sequence with all elements sorted by the comparator specified by the given `composeComparator` function\n     * or in natural order if no arguments are given.\n     *\n     * @returns {Sequence<T>}\n     */\n    sorted<T>(this: Sequence<T>, composeComparator?: (factory: ComparatorFactory<T>) => Comparator<T>): Sequence<T> {\n        const result: Array<T> = [];\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result.push(item.value);\n        }\n        if (composeComparator == null) {\n            result.sort();\n        } else {\n            const factory: ComparatorFactory<T> = createComparatorFactory<T>();\n            const comparator = composeComparator(factory);\n            result.sort(comparator);\n        }\n        const iterator = result[Symbol.iterator]();\n        return createSequence(iterator);\n    }\n\n}","import ComparatorFactory from \"./ComparatorFactory\";\nimport Comparator from \"./Comparator\";\n\nfunction compare<T>(comparison: (a: T, b: T) => number): Comparator<T> {\n    return Object.assign(comparison, {\n        reversed(): Comparator<T> {\n            return compare(\n                (a: T, b: T) => comparison(a, b) * -1\n            );\n        },\n        then(nextComparison: (a: T, b: T) => number): Comparator<T> {\n            return compare(\n                (a: T, b: T) => {\n                    const result = comparison(a, b);\n                    return result !== 0\n                        ? result\n                        : nextComparison(a, b);\n                }\n            );\n        },\n        thenDescending(nextComparison: (a: T, b: T) => number): Comparator<T> {\n            return this.then(\n                compare(nextComparison)\n                    .reversed()\n            );\n        },\n        thenBy(keyOrSelector: any): Comparator<T> {\n            const selector = asSelector<T>(keyOrSelector);\n            return this.then(\n                (a: T, b: T) => naturalCompare(selector(a), selector(b))\n            );\n        },\n        thenByDescending(keyOrSelector: any): Comparator<T> {\n            const selector = asSelector<T>(keyOrSelector);\n            return this.then(\n                compare(\n                    (a: T, b: T) => naturalCompare(selector(a), selector(b))\n                ).reversed()\n            );\n        }\n    });\n}\n\nfunction compareBy<T>(keyOrSelector: any): Comparator<T> {\n    const selector = asSelector<T>(keyOrSelector);\n    return compare<T>(\n        (a: T, b: T) => naturalCompare(selector(a), selector(b))\n    );\n}\n\nfunction compareByDescending<T>(keyOrSelector: any): Comparator<T> {\n    const selector = asSelector<T>(keyOrSelector);\n    return compare<T>(\n        (a: T, b: T) => naturalCompare(selector(b), selector(a))\n    );\n}\n\nfunction asSelector<T>(keyOrSelector: (item: T) => any | string): (item: T) => any {\n    return typeof keyOrSelector === \"function\"\n        ? keyOrSelector\n        : (item: T) => (item as any)[keyOrSelector as string];\n}\n\nfunction naturalCompare<T>(a: T, b: T): number {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nfunction naturalOrder<T>(): Comparator<T> {\n    return compare(naturalCompare);\n}\n\nfunction reverseOrder<T>(): Comparator<T> {\n    return compare<T>(naturalCompare).reversed();\n}\n\nfunction nullsLast<T>(): Comparator<T> {\n    return compare<T>(\n        (a: T, b: T) => a === null ? 1 : b === null ? -1 : 0\n    );\n}\n\nfunction nullsFirst<T>(): Comparator<T> {\n    return compare<T>(\n        (a: T, b: T) => a === null ? -1 : b === null ? 1 : 0\n    );\n}\n\nfunction createComparatorFactory<T>(): ComparatorFactory<T> {\n    return {\n        compare,\n        compareBy,\n        compareByDescending,\n        naturalOrder,\n        reverseOrder,\n        nullsFirst,\n        nullsLast\n    };\n}\n\nexport default createComparatorFactory;","import Sequence from \"./Sequence\";\n\nexport class SortedBy {\n\n    /**\n     * Returns a new sequence with all elements sorted ascending by the value specified\n     * by the given `selector` function.\n     *\n     * @param {(value: T) => R} selector\n     * @returns {Sequence<T>}\n     */\n    sortedBy<T, R>(this: Sequence<T>, selector: (value: T) => R): Sequence<T> {\n        return this.sorted(it => it.compareBy(selector));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class SortedByDescending {\n\n    /**\n     * Returns a new sequence with all elements sorted descending by the value specified\n     * by the given `selector` function.\n     *\n     * @param {(value: T) => R} selector\n     * @returns {Sequence<T>}\n     */\n    sortedByDescending<T, R>(this: Sequence<T>, selector: (value: T) => R): Sequence<T> {\n        return this.sorted(it => it.compareByDescending(selector));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class SortedDescending {\n\n    /**\n     * Returns a new sequence with all elements sorted in reverse (descending) natural order.\n     *\n     * @returns {Sequence<T>}\n     */\n    sortedDescending<T>(this: Sequence<T>): Sequence<T> {\n        return this.sorted(it => it.reverseOrder());\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class SortedWith {\n\n    /**\n     * Returns a new sequence with all elements sorted be the given `compare` function.\n     *\n     * @param {(a: T, b: T) => number} comparison\n     * @returns {Sequence<T>}\n     */\n    sortedWith<T>(this: Sequence<T>, comparison: (a: T, b: T) => number): Sequence<T> {\n        return this.sorted(it => it.compare(comparison));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Sum {\n\n    /**\n     * Returns the sum of all numbers.\n     *\n     * @returns {number}\n     */\n    sum(this: Sequence<number>): number {\n        let result = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result += item.value;\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class SumBy {\n\n    /**\n     * Returns the sum of all numbers specified by the given `selector` function.\n     *\n     * @param {(value: T) => number} selector\n     * @returns {number}\n     */\n    sumBy<T>(this: Sequence<T>, selector: (value: T) => number): number {\n        let result = 0;\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result += selector(item.value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Take {\n\n    /**\n     * Returns a new sequence consisting of the first `n` elements. All other elements\n     * are discarded.\n     *\n     * @param {number} n\n     * @returns {Sequence<T>}\n     */\n    take<T>(this: Sequence<T>, n: number): Sequence<T> {\n        return this.withIndex()\n            .takeWhile(it => it.index < n)\n            .map(it => it.value);\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass TakeWhileIterator<T> implements Iterator<T> {\n    constructor(private readonly iterator: Iterator<T>,\n                private readonly predicate: (item: T) => boolean) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        const item = this.iterator.next();\n        if (!item.done) {\n            const result = this.predicate(item.value);\n            if (result) {\n                return {done: false, value: item.value};\n            }\n        }\n        return {done: true, value: undefined as any};\n    }\n}\n\nexport class TakeWhile {\n\n    /**\n     * Takes all elements of the sequence as long as the given `predicate` evaluates to true.\n     *\n     * @param {(item: T) => boolean} predicate\n     * @returns {Sequence<T>}\n     */\n    takeWhile<T>(this: Sequence<T>, predicate: (item: T) => boolean): Sequence<T> {\n        return createSequence(new TakeWhileIterator(this.iterator, predicate));\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ToArray {\n\n    /**\n     * Returns all elements of the sequence as array. If an `array` is passed\n     * the elements are appended to the end of the array.\n     *\n     * @param {Array<T>} array\n     * @returns {Array<T>}\n     */\n    toArray<T>(this: Sequence<T>, array?: Array<T>): Array<T> {\n        const result: Array<T> = array || [];\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result.push(item.value);\n        }\n        return result;\n    }\n\n    /**\n     * Returns all elements of the sequence as array. If an `array` is passed\n     * the elements are appended to the end of the array.\n     *\n     * @param {Array<T>} array\n     * @returns {Array<T>}\n     */\n    toList<T>(this: Sequence<T>, array?: Array<T>): Array<T> {\n        return this.toArray(array);\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ToMap {\n\n    /**\n     * Returns a map consisting of each key-value pair. If a `map` is passed\n     * the pairs are set on this map. Duplicate keys override each other.\n     *\n     * @param {Map<K, V>} map\n     * @returns {Map<K, V>}\n     */\n    toMap<K, V>(this: Sequence<[K, V]>, map?: Map<K, V>): Map<K, V> {\n        const result = map || new Map<K, V>();\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const pair = item.value;\n            const key = pair[0];\n            const value = pair[1];\n            result.set(key, value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class ToSet {\n\n    /**\n     * Returns all elements of the sequence as set. If a `set` is passed\n     * the elements are added to this set.\n     *\n     * @param {Set<T>} set\n     * @returns {Set<T>}\n     */\n    toSet<T>(this: Sequence<T>, set?: Set<T>): Set<T> {\n        const result = set || new Set();\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            result.add(item.value);\n        }\n        return result;\n    }\n\n}","import Sequence from \"./Sequence\";\n\nexport class Unzip {\n\n    /**\n     * Returns a pair of arrays where the first array contains all first values\n     * and the second array all second values from each input pair of the sequence.\n     *\n     * @returns {[Array<T> , Array<S>]}\n     */\n    unzip<T, S>(this: Sequence<[T, S]>): [Array<T>, Array<S>] {\n        const array1: Array<T> = [];\n        const array2: Array<S> = [];\n        for (let item = this.iterator.next(); !item.done; item = this.iterator.next()) {\n            const [first, second] = item.value;\n            array1.push(first);\n            array2.push(second);\n        }\n        return [array1, array2];\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\nimport IndexedValue from \"./IndexedValue\";\n\nclass IndexIterator<T> implements Iterator<IndexedValue<T>> {\n    private index = -1;\n\n    constructor(private readonly iterator: Iterator<T>) {\n    }\n\n    next(value?: any): IteratorResult<IndexedValue<T>> {\n        const item = this.iterator.next();\n        if (item.done) {\n            return {done: true, value: undefined as any};\n        }\n        this.index++;\n        return {\n            done: false,\n            value: {\n                index: this.index,\n                value: item.value\n            }\n        };\n    }\n}\n\nexport class WithIndex {\n\n    /**\n     * Returns a new sequence consisting of indexed values for all original elements.\n     *\n     * @returns {Sequence<IndexedValue<T>>}\n     */\n    withIndex<T>(this: Sequence<T>): Sequence<IndexedValue<T>> {\n        return createSequence(new IndexIterator(this.iterator));\n    }\n\n}","import Sequence, {createSequence} from \"./Sequence\";\n\nclass ZipIterator<T, S> implements Iterator<[T, S]> {\n    constructor(private readonly iterator1: Iterator<T>,\n                private readonly iterator2: Iterator<S>) {\n    }\n\n    next(value?: any): IteratorResult<[T, S]> {\n        const item1 = this.iterator1.next();\n        const item2 = this.iterator2.next();\n        if (item1.done || item2.done) {\n            return {done: true, value: undefined as any};\n        } else {\n            return {done: false, value: [item1.value, item2.value]};\n        }\n    }\n\n}\n\nexport class Zip {\n\n    /**\n     * Returns a new sequence consisting of pairs built the elements of both sequences\n     * with the same index. The resulting sequence has the length of the shortest input\n     * sequence. All other elements are discarded.\n     *\n     * @param {Sequence<S>} other\n     * @returns {Sequence<[T , S]>}\n     */\n    zip<T, S>(this: Sequence<T>, other: Sequence<S>): Sequence<[T, S]> {\n        return createSequence(new ZipIterator(this.iterator, other.iterator));\n    }\n\n}","export default class GeneratorIterator<T> implements Iterator<T> {\n    constructor(private readonly nextFunction: () => T | null | undefined) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        const nextItem = this.nextFunction();\n        return {\n            done: nextItem == null,\n            value: nextItem!\n        };\n    }\n}","export default class GeneratorSeedIterator<T> implements Iterator<T> {\n    private prevItem: T;\n\n    constructor(private readonly seed: T,\n                private readonly nextFunction: (value: T) => T | null | undefined) {\n    }\n\n    next(value?: any): IteratorResult<T> {\n        if (this.prevItem == null) {\n            this.prevItem = this.seed;\n            return {done: false, value: this.seed};\n        }\n        const nextItem = this.nextFunction(this.prevItem);\n        if (nextItem == null) {\n            return {done: true, value: undefined as any};\n        }\n        this.prevItem = nextItem;\n        return {\n            done: false,\n            value: nextItem!\n        };\n    }\n}"],"sourceRoot":""}